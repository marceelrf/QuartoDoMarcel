[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Welcome to my blog where I will provide professional content about R, machine learning, biomaterials and bioinformatics, among others, and also personal content about the glorious São Paulo Futebol Clube.\nThis blog is my first adventure using Quarto!\nYou can find me on the social networks below (Important: My twitter is for mostly personal content, please don’t take me seriously!)."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Quarto Do Marcel",
    "section": "",
    "text": "30 days chart challenge - day 02\n\n\n\n\n\n\n\nR\n\n\nDataviz\n\n\n\n\nwaffles plot\n\n\n\n\n\n\nApr 2, 2023\n\n\nMarcel Ferreira\n\n\n\n\n\n\n  \n\n\n\n\n30 days chart challenge - day 01\n\n\n\n\n\n\n\nR\n\n\nDataviz\n\n\n\n\npart to whole\n\n\n\n\n\n\nApr 1, 2023\n\n\nMarcel Ferreira\n\n\n\n\n\n\n  \n\n\n\n\nOperations with vectors\n\n\n\n\n\n\n\nR\n\n\nbase\n\n\n\n\nNumeric operations\n\n\n\n\n\n\nSep 5, 2022\n\n\nMarcel Ferreira\n\n\n\n\n\n\n  \n\n\n\n\nR objects 3\n\n\n\n\n\n\n\nR\n\n\nbase\n\n\n\n\nLists\n\n\n\n\n\n\nAug 28, 2022\n\n\nMarcel Ferreira\n\n\n\n\n\n\n  \n\n\n\n\nR objects 2\n\n\n\n\n\n\n\nR\n\n\nbase\n\n\n\n\nTwo dimensional objects\n\n\n\n\n\n\nAug 24, 2022\n\n\nMarcel Ferreira\n\n\n\n\n\n\n  \n\n\n\n\nR objects\n\n\n\n\n\n\n\nR\n\n\nbase\n\n\n\n\n\n\n\n\n\n\n\nAug 12, 2022\n\n\nMarcel Ferreira\n\n\n\n\n\n\n  \n\n\n\n\nMy first R package\n\n\n\n\n\n\n\nnews\n\n\nR\n\n\nFTIR\n\n\nbiomaterials\n\n\n\n\n\n\n\n\n\n\n\nAug 11, 2022\n\n\nMarcel Ferreira\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nAug 10, 2022\n\n\nMarcel Ferreira\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Operations-with-vector/index.html",
    "href": "posts/Operations-with-vector/index.html",
    "title": "Operations with vectors",
    "section": "",
    "text": "In previous posts we have talked about object types and their atomic classes, among them vectors, which are the basis for the other objects. In this post I will begin to demonstrate how the main operations with vectors work, today focusing on numerical operations."
  },
  {
    "objectID": "posts/Operations-with-vector/index.html#numeric-vectors",
    "href": "posts/Operations-with-vector/index.html#numeric-vectors",
    "title": "Operations with vectors",
    "section": "Numeric vectors",
    "text": "Numeric vectors\nAs said before, vectors are one-dimensional objects composed of a set of elements, where the order does not necessarily have a meaning, serving only to locate the element in the vector. Let’s look at the example of vector v1 below:\n\\[\nv_1 = \\{1,2,3,4,5\\}\n\\]\nv1 represents the sequence of integers from 1 to 5. In R we can create any vector with the c() function, as we saw earlier. But it is not the only way. We can create sequences with the : operator, for integers, and the seq() function for general cases. So let’s create v1 as an object in R in these three different ways. But first a hint, when creating an object in R we can do it inside () and the generated object will be printed automatically.\n\n#created with c()\n(v1_1 <- c(1,2,3,4,5))\n\n[1] 1 2 3 4 5\n\n#created with :\n(v1_2 <- 1:5)\n\n[1] 1 2 3 4 5\n\n#created with seq()\n(v1_3 <- seq(from = 1, to = 5, by = 1))\n\n[1] 1 2 3 4 5\n\n\nWhen we choose a fractional value in the argument by, the seq() function can generate any number sequence (Arithmetic Progressions)."
  },
  {
    "objectID": "posts/Operations-with-vector/index.html#math-using-vectors",
    "href": "posts/Operations-with-vector/index.html#math-using-vectors",
    "title": "Operations with vectors",
    "section": "Math using vectors",
    "text": "Math using vectors\nThe basic mathematical operations in R, addition, subtraction, multiplication, division, etc, are contained in the table below:\n\nMath operations\n\n\n\n\n\n\n\n\nMath\nOperator\nCode\nExample\n\n\n\n\naddtion\n+\n2+2\n\\(2+2 =4\\)\n\n\nsubtraction\n-\n4-2\n\\(4-2=2\\)\n\n\nmultiplication\n*\n2*2\n\\(2\\times2=4\\)\n\n\ndivision\n/\n4/2\n\\(\\frac{4}{2} = 2\\)\n\n\npower\n^ or **\n2^2\n\\(2^2=4\\)\n\n\nsquare root\nsqrt()\nsqrt(4)\n\\(\\sqrt{4} = 2\\)\n\n\nexponential\nexp()\nexp(-4)\n\\(e^{-4} = 0.0183\\)\n\n\nlog\nlog(), log2 or log10\nlog(0.0183)\n\\(\\ln(0.0183) \\simeq -4\\)\n\n\n\nThere are others, but I believe that these will be the most used in our day to day. These operations in R work element by element. For example, when we add two vectors (\\(v_1=\\{1,2,3,4,5\\} v_2 = \\{2,3,4,5,6\\}\\)), R will add element 1 of v1 to 1 of v2, 2 of v1 to 2 of v2, and so on.\n\\[\nv_1+v_2=\\{1+2,2+3,3+4,4+5,5+6\\}\n\\]\n\\[\nv_1+v_2=\\{3,5,7,9,11\\}\n\\]\nSubtraction, multiplication, division, and potentiation follow the same principle.\n\nv1 <- 1:5\nv2 <- 2:6\n#add\nv1+v2\n\n[1]  3  5  7  9 11\n\n#sub\nv1-v2\n\n[1] -1 -1 -1 -1 -1\n\n#multiplication\nv1*v2\n\n[1]  2  6 12 20 30\n\n#division\nv1/v2\n\n[1] 0.5000000 0.6666667 0.7500000 0.8000000 0.8333333\n\n#power\nv1^v2\n\n[1]     1     8    81  1024 15625\n\n\nFrom this we can infer that it is necessary in R that vectors contain the same number of elements (or the same length), but in practice this is not what happens. In case of vectors of different lengths R will recycle the vector with the smallest number of elements to match and thus perform the math. Consider the vectors \\(v_1 = \\{1,2,3,4,5\\}\\) and \\(v_3 = \\{0,2,1\\}\\), Let’s see how R performs subtraction.\n\\[\nv_1-v_3 = \\{1-0,2-2,3-1,4-0,5-2\\}\n\\]\n\\[\nv_1-v_3 = \\{1,0,2,4,3\\}\n\\]\nAgain, the operations addition, multiplication, division and power work equally in R.\n\nv1 <- 1:5\nv3 <- c(0,2,1)\n#add\nv1+v3\n\nWarning in v1 + v3: comprimento do objeto maior não é múltiplo do comprimento do\nobjeto menor\n\n\n[1] 1 4 4 4 7\n\n#sub\nv1-v3\n\nWarning in v1 - v3: comprimento do objeto maior não é múltiplo do comprimento do\nobjeto menor\n\n\n[1] 1 0 2 4 3\n\n#multiplication\nv1*v3\n\nWarning in v1 * v3: comprimento do objeto maior não é múltiplo do comprimento do\nobjeto menor\n\n\n[1]  0  4  3  0 10\n\n#division\nv1/v3\n\nWarning in v1/v3: comprimento do objeto maior não é múltiplo do comprimento do\nobjeto menor\n\n\n[1] Inf 1.0 3.0 Inf 2.5\n\n#power\nv1^v3\n\nWarning in v1^v3: comprimento do objeto maior não é múltiplo do comprimento do\nobjeto menor\n\n\n[1]  1  4  3  1 25\n\n\nNotice that a warning is displayed that the vectors have different sizes and that when we divide by 0 an Inf value relative to infinity is displayed. R’s recycling behavior may seem strange at first, but it is useful for performing scalar operations with vectors (remembering that in practice in R there are no scalars, only unit vectors).\n\\[\n5+v_1 = \\{5+1,5+2,5+3,5+4,5+5\\}\n\\]\n\\[\n5+v1 = \\{6,7,8,9,10\\}\n\\]\n\nv1 <- 1:5\n#add\nv1+5\n\n[1]  6  7  8  9 10\n\n#sub\nv1-5\n\n[1] -4 -3 -2 -1  0\n\n#multiplication\nv1*5\n\n[1]  5 10 15 20 25\n\n#division\nv1/5\n\n[1] 0.2 0.4 0.6 0.8 1.0\n\n#power\nv1^5\n\n[1]    1   32  243 1024 3125\n\n\nSimilarly, functions are also applied element by element. Let’s look at the same v1 being calculated its square root, exponential and logarithm.\n\nv1 <- 1:5\n#square root\nsqrt(v1)\n\n[1] 1.000000 1.414214 1.732051 2.000000 2.236068\n\n#exponential\nexp(v1)\n\n[1]   2.718282   7.389056  20.085537  54.598150 148.413159\n\n#log\nlog(v1)\n\n[1] 0.0000000 0.6931472 1.0986123 1.3862944 1.6094379\n\n\nR also contains periodic functions like sine (sin()), cosine (cos()) and tangent (tan()), and an inner object to represent pi.\n\npi\n\n[1] 3.141593\n\n#sine\nsin(pi)\n\n[1] 1.224606e-16\n\n#cossine\ncos(pi)\n\n[1] -1\n\n#tangent\ntan(pi)\n\n[1] -1.224647e-16\n\n\nIt is important to see that the values calculated by R, although they are infinitesimal, are not exactly the known values.\n\\[\n\\sin(\\pi) = 0\n\\]\n\\[\n\\cos(\\pi) = -1\n\\]\n\\[\n\\tan(\\pi) = 0\n\\]"
  },
  {
    "objectID": "posts/Operations-with-vector/index.html#concluding",
    "href": "posts/Operations-with-vector/index.html#concluding",
    "title": "Operations with vectors",
    "section": "Concluding",
    "text": "Concluding\nWell, there are many more functions and operators that can be applied, but I think we have covered the main ones. We saw how recycling works in operations. That’s it for now. I hope to see you in the next posts!\nSee you there!"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "My first R package",
    "section": "",
    "text": "preliminar hex\n\n\nIn the next few weeks I will be writing the function documentation and then finalizing the package. I am very happy because when I started using R to analyze my FTIR (infrared spectroscopy) data I could not apply tidyverse functions to my pipelines. It took me months of wracking my brains to find a model to leverage the existing packages and connect them to the tidyverse.\nYou can check the github repository.\nEnjoy!"
  },
  {
    "objectID": "posts/R-objects/index.html",
    "href": "posts/R-objects/index.html",
    "title": "R objects",
    "section": "",
    "text": "R is an extremely powerful language for data analysis and is used in many different fields. But many users start without taking the time to assimilate the different types of objects, which leads to mistakes that could simply be avoided. This in turn can lead to frustration, which is the gateway to the dark side of the force.\nvia GIPHY\nWhen I started analyzing data with R I was on a very tight deadline and had to skip these steps, and I made a lot of mistakes. Really, a lot!\nSo in this post I will talk about the basic object types, or classes, in R. Basic but effective. I hope it helps you."
  },
  {
    "objectID": "posts/R-objects/index.html#atomic-data",
    "href": "posts/R-objects/index.html#atomic-data",
    "title": "R objects",
    "section": "Atomic data",
    "text": "Atomic data\nThese are the basic data classes in R. More complex objects will always be built using them. There are 6 classes in R: logical, integer, real, complex, string (or character) and raw. logical are values like TRUE or FALSE (Known as Booleans). integer, real and complex are numeric types. character are values like words, in other languages this type of values are call as strings. And about raw I must be honest with you. I have never used it!\n\n#logical\nTRUE\n\n[1] TRUE\n\n#integer\n1L\n\n[1] 1\n\n#real\n1.2\n\n[1] 1.2\n\n#complex\ncomplex(real = 1,imaginary = 2)\n\n[1] 1+2i\n\n#character\n\"String\"\n\n[1] \"String\"\n\n\nYou may have notice that there is special ways to create these objects. We use \"\" to define a character. We add L to the end of a number to make it explicit that it is an integer. We need the complex() function to create a complex number. And logicals are defined by the uppercase words TRUE and FALSE, and their respective initials, T and F."
  },
  {
    "objectID": "posts/R-objects/index.html#vectors",
    "href": "posts/R-objects/index.html#vectors",
    "title": "R objects",
    "section": "Vectors",
    "text": "Vectors\nVectors are one-dimensional objects composed of a set of elements, where the order does not necessarily have a meaning, serving only to locate the element in the vector. The functions c() is used to create vector in R.\n\nv1 <- c(1,3,5)\nv1\n\n[1] 1 3 5\n\nv2 <- c(\"ball\",\"house\")\nv2\n\n[1] \"ball\"  \"house\"\n\nv3 <- c(T,T,F)\nv3\n\n[1]  TRUE  TRUE FALSE\n\n\nThe operator [] can be used to extract the element of certain position in a vector. For example, let’s extract the second element of the vectors v1, v2 and v3.\n\nv1[2]\n\n[1] 3\n\nv2[2]\n\n[1] \"house\"\n\nv3[2]\n\n[1] TRUE\n\n\nPay attention when use this operator to not try access an non existing position in a vector. such as trying to access the fourth element in a vector (v1) with only three elements. This will result in a NA value, which is represent the missing values in R, which are a very important topic that I will cover in the future. Stay tuned!\n\nv1[4]\n\n[1] NA\n\n\nThere are other ways to create vectors in R considering their classes that I will dedicate a separate post for this.\nIn R different classes cannot coexist in the same vector (we will see what a vector is later, for now just trust me) and there is coercion when we put them together. Coercion occurs in the following order:\ncharacter > complex > real > integer > logical\nThis means, if you put a character and a numeric together in a vector, R will coerce the numeric to become a character. If you put a logical in the same vector as a numeric it will be turned into a numeric. The functions class() and typeof() can be used to check the class and type, respectively, of R objects.\n\n#class and typeof usage\nclass(\"ball\")\n\n[1] \"character\"\n\ntypeof(1L)\n\n[1] \"integer\"\n\nclass(1.2)\n\n[1] \"numeric\"\n\n#coercion\nobj1 <-c(\"ball\",1)\nclass(obj1)\n\n[1] \"character\"\n\ntypeof(obj1)\n\n[1] \"character\"\n\nobj2 <-c(TRUE,1)\nclass(obj2)\n\n[1] \"numeric\"\n\ntypeof(obj2)\n\n[1] \"double\"\n\n\nThis behavior is the source of major errors and it is always necessary to check that your objects are of the desired class. After all, it is impossible to perform mathematical operations with character in R, for example.\nHowever, the coercion behavior can be used to our advantage in the case of the trick of using logicals and numeric together. Like in the case where we want to know how many numbers in an vector are greater than a certain value. By using the > (greater than) operator we perform a logical test that returns TRUE/FALSE values. The sum() function, on the other hand, adds up all the elements of a vector and if it receives a logical vector it will transform TRUE into 1 and FALSE into 0.\n\n#a numeric vector\nv1 <- c(1,2,3,2,4,5,8,2,1)\n\n\n#logical test\nv1 > 3\n\n[1] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE FALSE\n\n#use sum to get how many numbers are grater than 3\nsum(v1 > 3)\n\n[1] 3\n\n\nThe post is getting long, so that’s it for now! In the next one we will talk about objects with larger dimensions like matrix and data.frame.\nI’m waiting for you!"
  },
  {
    "objectID": "posts/R-objects-2/index.html",
    "href": "posts/R-objects-2/index.html",
    "title": "R objects 2",
    "section": "",
    "text": "In the last post (R objects) we have seen the atomic classes and vectors, which are one-dimensional arrangements of these classes. But, as you can imagine, it’s not always possible to represent our data using one-dimensional object. When talking about two-dimensional objects tables are something extremely common in our daily lives. R has two types of objects for representing tables (2D objects): matrix and data.frames, very similar objects, but with one very important difference: matrix only accept ONE atomic class, while data.frames accept ONE per column."
  },
  {
    "objectID": "posts/R-objects-2/index.html#matrix",
    "href": "posts/R-objects-2/index.html#matrix",
    "title": "R objects 2",
    "section": "Matrix",
    "text": "Matrix\nTo create a matrix we need a vector (Yes, a vector) and the function matrix(). This function takes the vector and arrange in a object containing the number of rows and columns that we specify in the arguments nrow and ncol.\n\nv1 <- c(1,2,3,1,2,3)\n\nMat1 <- matrix(data = v1,\n               nrow = 2,\n               ncol = 3)\nMat1\n\n     [,1] [,2] [,3]\n[1,]    1    3    2\n[2,]    2    1    3\n\n\nIt’s possible to control the order of the elements in the matrix using the argument byrow, which controls whether the elements will be filled by rows or columns (default).\n\nmatrix(data = v1,\n       nrow = 2,\n       ncol = 3,\n       byrow = T)\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    1    2    3\n\nmatrix(data = v1,\n       nrow = 2,\n       ncol = 3,\n       byrow = F)\n\n     [,1] [,2] [,3]\n[1,]    1    3    2\n[2,]    2    1    3\n\n\nThe last argument, dimnames, allows us to choose names for the dimensions (rows and columns), but for this argument we need to use lists, and since we haven’t talked about this object class yet, I will show you how to achieve the same results using functions. The functions rownames() and colnames() are used to extract the row and column names, respectively. We can use an vector of characters, equal in length to the number of rows or columns, to choose their names.\n\n#Columns\ncolnames(Mat1)\n\nNULL\n\ncolnames(Mat1) <- c(\"Col1\",\"Col2\",\"Col3\")\ncolnames(Mat1)\n\n[1] \"Col1\" \"Col2\" \"Col3\"\n\n#Rows\nrownames(Mat1)\n\nNULL\n\nrownames(Mat1) <- c(\"Row1\",\"Row2\")\nrownames(Mat1)\n\n[1] \"Row1\" \"Row2\"\n\n\nSimilar to vectors, we can extract the elements using squarebrackets, but now we have to pass the indices to rows and columns.\n\n#Extract the 2nd row\nMat1[2,]\n\nCol1 Col2 Col3 \n   2    1    3 \n\n#Extract the 1st and 3rd columns\nMat1[,c(1,3)]\n\n     Col1 Col3\nRow1    1    2\nRow2    2    3\n\n#Extract the element row = 2 column = 2\nMat1[2,2]\n\n[1] 1"
  },
  {
    "objectID": "posts/R-objects-2/index.html#data-frames",
    "href": "posts/R-objects-2/index.html#data-frames",
    "title": "R objects 2",
    "section": "Data frames",
    "text": "Data frames\nData frames are objects design to store data tables in R. Similar to matrix, data frames are 2D objects but as said before, different columns can have different classes. In practice we can think of each column as being a different vector, and the $ operator allows us to extract this vector. Thinking about data analysis, in a data frame each column is a variable and each row is an observation.\nWe build data.frames with the function data.frame\n\ndf1 <- data.frame(var1 = c(1,2,3,4),\n                  var2 = c(\"a\",\"b\",\"c\",\"d\"),\n                  var3 = c(T,T,T,F))\ndf1\n\n  var1 var2  var3\n1    1    a  TRUE\n2    2    b  TRUE\n3    3    c  TRUE\n4    4    d FALSE\n\n\nExtracting vectors\n\ndf1$var1\n\n[1] 1 2 3 4\n\ndf1$var2\n\n[1] \"a\" \"b\" \"c\" \"d\"\n\ndf1$var3\n\n[1]  TRUE  TRUE  TRUE FALSE\n\n\nAs for matrix, we can use squartebrackets to extract elements (although I recommend extracting using the $ operator first).\n\n#Using squarebrackets\ndf1[2,2]\n\n[1] \"b\"\n\n#Using the $\ndf1$var2[2]\n\n[1] \"b\"\n\n\nThe names of columns (or variable) can be used in the squarebracket to extract the column.\n\ndf1[,\"var1\"]\n\n[1] 1 2 3 4\n\n\nFor matrix and for data.frames we can find the sizes of the dimensions with the functions nrow(), ncol(), and dim(), which return the number of rows, columns, and both, respectively.\n\n#number of rows\nnrow(df1)\n\n[1] 4\n\n#number of columns\nncol(df1)\n\n[1] 3\n\n#length of dimensions\ndim(df1)\n\n[1] 4 3\n\n\nSo far, so good. In the next post I will deal with that list I talked about here, and we will see how powerful they are.\nI’ll be waiting for you!"
  },
  {
    "objectID": "posts/R-objects-3/index.html",
    "href": "posts/R-objects-3/index.html",
    "title": "R objects 3",
    "section": "",
    "text": "It is popularly known the curse of the third movie. Alien 3, Return of the Jedi, X-men: The Last Stand, Spider-Man 3, The Godfather 3, among others (MANY OTHERS) have suffered from this curse. However, MARVEL has overcome this curse recently with films like Infinity War, Thor Ragnarok, and Spider-Man with No Way Home. Inspired by her, we will conclude our trilogy of basic R objects. In this post we will look at Lists."
  },
  {
    "objectID": "posts/R-objects-3/index.html#lists",
    "href": "posts/R-objects-3/index.html#lists",
    "title": "R objects 3",
    "section": "Lists",
    "text": "Lists\nLists are objects similar to vectors, but each element can be a different object. That is, a list can contain a vector in one element, a matrix or data.frame in another, and even a list in a given element. That’s right, lists within lists.\n\n\n\n\nvia GIPHY\n\n\n\nThe function list() is used to create a list in R:\n\nv1 <- c(1,3,5,7)\nv2 <- c(\"a\",\"b\")\ndf1 <- data.frame(var1 = c(1,2,3,4),\n                  var2 = c(\"a\",\"b\",\"c\",\"d\"),\n                  var3 = c(T,T,T,F))\n\nl1 <- list(v1,v2,df1)\nl1\n\n[[1]]\n[1] 1 3 5 7\n\n[[2]]\n[1] \"a\" \"b\"\n\n[[3]]\n  var1 var2  var3\n1    1    a  TRUE\n2    2    b  TRUE\n3    3    c  TRUE\n4    4    d FALSE\n\n\nWe can see that the output of a list contains differences from the others that we have seen. Each element number on a list is printed by R with double square brackets. Then R will print the elements as we have seen for each class.\nThis is something important to note when talking about how we extract elements from lists. If we use the single bracket operator the output will be a list, but only containing the element of that index.\n\n#Single square bracket\nl1[2]\n\n[[1]]\n[1] \"a\" \"b\"\n\n#Double square bracket\nl1[[2]]\n\n[1] \"a\" \"b\"\n\n\nWe can use the class() function to check the output classes.\n\n#Single square bracket\nclass(l1[2])\n\n[1] \"list\"\n\n#Double square bracket\nclass(l1[[2]])\n\n[1] \"character\"\n\n\nWhen working with lists we can access elements internal to a given list element. To do this we use a double square bracket followed by a single square bracket. Example, let’s extract the third element contained in the first element of the list l1.\n\n# The third element in the first list element\nl1[[1]][3]\n\n[1] 5\n\n\nThe third element of l1 is a data.frame, we can extract its columns or rows in a similar way.\n\n#The first column of the data.frame in the third list element\nl1[[3]][,1]\n\n[1] 1 2 3 4\n\n#The rows number 2 and 3 in the data.frame in the third list element\nl1[[3]][2:3,]\n\n  var1 var2 var3\n2    2    b TRUE\n3    3    c TRUE\n\n\nJust as we can name columns and rows in data.frames/matrix, we can name each element in a list. This is done using the names() function.\n\n#unamed list\nnames(l1)\n\nNULL\n\nnames(l1) <- c(\"element1\",\"element2\",\"element3\")\n\n#named list\nnames(l1)\n\n[1] \"element1\" \"element2\" \"element3\"\n\n\nAnd, as you may be wondering, we can use these names to extract elements from the list by passing them in the single or double square bracket operators.\n\nl1\n\n$element1\n[1] 1 3 5 7\n\n$element2\n[1] \"a\" \"b\"\n\n$element3\n  var1 var2  var3\n1    1    a  TRUE\n2    2    b  TRUE\n3    3    c  TRUE\n4    4    d FALSE\n\n#Single square bracket\nl1[c(\"element1\",\"element3\")]\n\n$element1\n[1] 1 3 5 7\n\n$element3\n  var1 var2  var3\n1    1    a  TRUE\n2    2    b  TRUE\n3    3    c  TRUE\n4    4    d FALSE\n\n#Double square bracket\nl1[[\"element1\"]]\n\n[1] 1 3 5 7"
  },
  {
    "objectID": "posts/R-objects-3/index.html#concluding",
    "href": "posts/R-objects-3/index.html#concluding",
    "title": "R objects 3",
    "section": "Concluding",
    "text": "Concluding\nIn this three posts we have seen the main objects that form the basis of R. There are others, of course, but with these well understood we can solve the vast majority of challenges when working with R.\nI will soon create content showing operations with these objects in practice. That’s it for now. See you around!"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Mee"
  },
  {
    "objectID": "posts/30-days-charts-challenge-day01/index.html",
    "href": "posts/30-days-charts-challenge-day01/index.html",
    "title": "30 days chart challenge - day 01",
    "section": "",
    "text": "The data that I choose to this challenge was the Marvel Chracters (https://www.kaggle.com/datasets/syedasimalishah/marvel-chracters).\n\nlibrary(tidyverse)\n\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.0     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.1     v tibble    3.1.8\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.1     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(ggsankey)\nlibrary(extrafont)\n\nRegistering fonts with R\n\nlibrary(cowplot)\n\n\nAttaching package: 'cowplot'\n\nThe following object is masked from 'package:lubridate':\n\n    stamp\n\n\n\ndata <- read_csv(file = \"Marvel Movies.csv\")\n\nRows: 16376 Columns: 11\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr (9): name, ID, ALIGN, EYE, HAIR, SEX, GSM, ALIVE, FIRST APPEARANCE\ndbl (2): APPEARANCES, Year\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCheck the NA’s\n\ndata %>% \n  mutate(\n    across(everything(),is.na)\n    ) %>%\n  summarise(\n    across(everything(),sum)\n    )\n\n# A tibble: 1 x 11\n   name    ID ALIGN   EYE  HAIR   SEX   GSM ALIVE APPEARANCES FIRST APPE~1  Year\n  <int> <int> <int> <int> <int> <int> <int> <int>       <int>        <int> <int>\n1     0  3770  2812  9767  4264   854 16286     3        1096          815   815\n# ... with abbreviated variable name 1: `FIRST APPEARANCE`\n\n\n\ndata %>%\n  map(.f = \\(x) length(unique(x)))\n\n$name\n[1] 16376\n\n$ID\n[1] 5\n\n$ALIGN\n[1] 4\n\n$EYE\n[1] 25\n\n$HAIR\n[1] 26\n\n$SEX\n[1] 5\n\n$GSM\n[1] 7\n\n$ALIVE\n[1] 3\n\n$APPEARANCES\n[1] 359\n\n$`FIRST APPEARANCE`\n[1] 833\n\n$Year\n[1] 76\n\n\n\ndata %>% \n  group_by(HAIR) %>%\n  count(sort = TRUE) %>%\n  mutate(prop = 100*n/nrow(data))\n\n# A tibble: 26 x 3\n# Groups:   HAIR [26]\n   HAIR           n   prop\n   <chr>      <int>  <dbl>\n 1 <NA>        4264 26.0  \n 2 Black Hair  3755 22.9  \n 3 Brown Hair  2339 14.3  \n 4 Blond Hair  1582  9.66 \n 5 No Hair     1176  7.18 \n 6 Bald         838  5.12 \n 7 White Hair   754  4.60 \n 8 Red Hair     620  3.79 \n 9 Grey Hair    531  3.24 \n10 Green Hair   117  0.714\n# ... with 16 more rows\n\n\n\ndata %>% \n    group_by(EYE) %>%\n  count(sort = TRUE) %>%\n  mutate(prop = 100*n/nrow(data))\n\n# A tibble: 25 x 3\n# Groups:   EYE [25]\n   EYE             n   prop\n   <chr>       <int>  <dbl>\n 1 <NA>         9767 59.6  \n 2 Blue Eyes    1962 12.0  \n 3 Brown Eyes   1924 11.7  \n 4 Green Eyes    613  3.74 \n 5 Black Eyes    555  3.39 \n 6 Red Eyes      508  3.10 \n 7 White Eyes    400  2.44 \n 8 Yellow Eyes   256  1.56 \n 9 Grey Eyes      95  0.580\n10 Hazel Eyes     76  0.464\n# ... with 15 more rows\n\n\n\n\n\n(df_ex <- data %>%\n  slice_sample(n = 20) %>%\n    mutate(across(where(is.character),.f = \\(x) replace_na(x,\"No Info\"))) %>%\n  make_long(\"ID\",\"SEX\",\"EYE\",\"HAIR\",\"ALIGN\",\"ALIVE\"))\n\n# A tibble: 120 x 4\n   x     node              next_x next_node         \n   <fct> <chr>             <fct>  <chr>             \n 1 ID    No Info           SEX    Male Characters   \n 2 SEX   Male Characters   EYE    No Info           \n 3 EYE   No Info           HAIR   Grey Hair         \n 4 HAIR  Grey Hair         ALIGN  Good Characters   \n 5 ALIGN Good Characters   ALIVE  Living Characters \n 6 ALIVE Living Characters <NA>   <NA>              \n 7 ID    Secret Identity   SEX    Female Characters \n 8 SEX   Female Characters EYE    No Info           \n 9 EYE   No Info           HAIR   Blond Hair        \n10 HAIR  Blond Hair        ALIGN  Neutral Characters\n# ... with 110 more rows\n\n\n\n(\n  p1 <- df_ex %>%\n  ggplot(aes(x = x,\n             next_x = next_x,\n             node = node,\n             next_node = next_node,\n             fill = factor(node),\n             label = node)) +\n  geom_sankey(flow.alpha = .5, color = \"black\") +\n  geom_sankey_label(size = 3.5, color = 1, fill = \"white\",family = \"Segoe UI\") +\n  viridis::scale_fill_viridis(option = \"A\",discrete = TRUE) + \n  theme_void() +\n  labs(title =\"Marvel movie characters\") +\n  theme(\n    legend.position = \"none\",\n    plot.background = element_rect(fill = \"#e8e6d1\",linewidth = 0),\n    panel.background = element_rect(fill = \"#e8e6d1\",linewidth = 0,linetype = \"blank\"),\n    text = element_text(family = \"Segoe UI\"),\n    plot.title = element_text(family = \"Segoe UI\",face = \"bold\",size = 30,hjust = .5))\n  )\n\n\n\n\n\nggdraw(p1) +\n  draw_label(label = \"@marceelrf\",x = .1, y = 0.05,fontfamily = \"Segoe UI\") +\n  draw_image(image = \"Marvel_Logo.svg\",x = .85,y = .01,width = 0.13, height = 0.2)\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): métrica da\nfonte desconhecida para caractere 0x4d\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): fonte com\nlargura desconhecida para caractere 0x67\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): fonte com\nlargura desconhecida para caractere 0x6a\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): fonte com\nlargura desconhecida para caractere 0x70\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): fonte com\nlargura desconhecida para caractere 0x71\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): fonte com\nlargura desconhecida para caractere 0x79\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): fonte com\nlargura desconhecida para caractere 0x51"
  },
  {
    "objectID": "posts/30-days-charts-challenge-day01/index.html#final-plot",
    "href": "posts/30-days-charts-challenge-day01/index.html#final-plot",
    "title": "30 days chart challenge - day 01",
    "section": "Final plot",
    "text": "Final plot\n\n(plot_final <- \n    data %>%\n    mutate(across(where(is.character),.f = \\(x) replace_na(x,\"No Info\"))) %>%\n    mutate(HAIR = fct_lump_prop(HAIR, 0.05),\n           EYE = fct_lump_prop(EYE, 0.05)) %>%\n  make_long(\"ID\",\"SEX\",\"EYE\",\"HAIR\",\"ALIGN\",\"ALIVE\") %>%\n    ggplot(aes(x = x,\n             next_x = next_x,\n             node = node,\n             next_node = next_node,\n             fill = factor(node),\n             label = node)) +\n  geom_sankey(flow.alpha = .5, color = \"black\") +\n  geom_sankey_label(size = 3.5, color = 1, fill = \"white\",family = \"Segoe UI\") +\n  viridis::scale_fill_viridis(option = \"A\",discrete = TRUE) + \n  theme_void() +\n  labs(title = \"Marvel movie characters\",\n       subtitle = \"Source: https://www.kaggle.com/datasets/syedasimalishah/marvel-chracters\") +\n  theme(\n    legend.position = \"none\",\n    plot.background = element_rect(fill = \"#e8e6d1\",linewidth = 0),\n    panel.background = element_rect(fill = \"#e8e6d1\",linewidth = 0,linetype = \"blank\"), plot.subtitle = element_text(family = \"Segoe UI\",face = \"italic\",size = 8,hjust = .1),\n    text = element_text(family = \"Segoe UI\"),\n    plot.title = element_text(family = \"Segoe UI\",face = \"bold\",size = 30,hjust = .5))\n  )\n\nWarning: attributes are not identical across measure variables; they will be\ndropped\n\n\n\n\nggdraw(plot_final) +\n  draw_label(label = \"@marceelrf\",x = .1, y = 0.025,fontfamily = \"Segoe UI\") +\n  draw_image(image = \"Marvel_Logo.svg\",x = .85,y = 0.00001,\n             width = 0.13, height = 0.2,vjust = .25)\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): métrica da\nfonte desconhecida para caractere 0x4d\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): fonte com\nlargura desconhecida para caractere 0x67\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): fonte com\nlargura desconhecida para caractere 0x6a\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): fonte com\nlargura desconhecida para caractere 0x70\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): fonte com\nlargura desconhecida para caractere 0x71\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): fonte com\nlargura desconhecida para caractere 0x79\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): fonte com\nlargura desconhecida para caractere 0x51\n\n\n\n\n\n\nggsave(filename = \"day01_finalplot.png\",width = 10,height = 7,dpi = 600)"
  },
  {
    "objectID": "posts/30-days-charts-challenge-day02/index.html",
    "href": "posts/30-days-charts-challenge-day02/index.html",
    "title": "30 days chart challenge - day 02",
    "section": "",
    "text": "library(tidyverse)\n\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.0     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.1     v tibble    3.1.8\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.1     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(waffle)\nlibrary(cowplot)\n\n\nAttaching package: 'cowplot'\n\nThe following object is masked from 'package:lubridate':\n\n    stamp\n\nlibrary(extrafont)\n\nRegistering fonts with R"
  },
  {
    "objectID": "posts/30-days-charts-challenge-day02/index.html#data",
    "href": "posts/30-days-charts-challenge-day02/index.html#data",
    "title": "30 days chart challenge - day 02",
    "section": "Data",
    "text": "Data\n\ndata <- read_csv(\"player_stats.csv\")\n\nRows: 2769 Columns: 26\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr  (6): Player name, Nation, Position, Squad, Compition, Age\ndbl (19): Born year, Match played, Starts, 90s, Goal, Assist, Goal + Assist,...\nnum  (1): MIn\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nglimpse(data)\n\nRows: 2,769\nColumns: 26\n$ `Player name`                                        <chr> \"Brenden Aaronson~\n$ Nation                                               <chr> \"USA\", \"USA\", \"MA~\n$ Position                                             <chr> \"MF,FW\", \"MF\", \"D~\n$ Squad                                                <chr> \"Leeds United\", \"~\n$ Compition                                            <chr> \"Premier League\",~\n$ Age                                                  <chr> \"22-157\", \"19-214~\n$ `Born year`                                          <dbl> 2000, 2003, 1987,~\n$ `Match played`                                       <dbl> 26, 1, 28, 20, 26~\n$ Starts                                               <dbl> 23, 8, 28, 14, 26~\n$ MIn                                                  <dbl> 1948.0, 0.1, 2520~\n$ `90s`                                                <dbl> 21.6, NA, 28.0, 1~\n$ Goal                                                 <dbl> 1.0, NA, 1.0, 0.9~\n$ Assist                                               <dbl> 2.0, NA, 1.0, 1.0~\n$ `Goal + Assist`                                      <dbl> 3.0, NA, 2.0, 0.9~\n$ `Goal+Penalty kick`                                  <dbl> 1.0, NA, 1.0, 1.9~\n$ `Penalty Kick`                                       <dbl> 0, 0, 0, 0, 0, 0,~\n$ `Penalty Kick Attempted`                             <dbl> 0, 0, 0, 0, 0, 0,~\n$ `Yellow Card`                                        <dbl> 2.0, NA, 3.0, 2.8~\n$ `Red Card`                                           <dbl> 0.00, 0.00, 0.00,~\n$ `Expected Goal`                                      <dbl> 2.9, 0.0, 1.8, 34~\n$ `Non-penalty Expected Goal`                          <dbl> 2.9, 0.0, 1.8, 84~\n$ `Expected Assisted Goal`                             <dbl> 3.7, 0.0, 0.4, 74~\n$ `Non-penalty Expected Goal + Expected Assisted Goal` <dbl> 6.60, 0.00, 2.20,~\n$ `Progressive Carries`                                <dbl> 36.00, 0.00, 20.0~\n$ `Progressive Passes`                                 <dbl> 72.00, 0.00, 147.~\n$ `Progressive Passes Receive`                         <dbl> 120.00, 0.00, 5.0~\n\n\n\nCheck NA’s\n\ndata %>%\n  mutate(across(everything(), is.na)) %>% \n  summarise(across(everything(),sum))\n\n# A tibble: 1 x 26\n  Player~1 Nation Posit~2 Squad Compi~3   Age Born ~4 Match~5 Starts   MIn `90s`\n     <int>  <int>   <int> <int>   <int> <int>   <int>   <int>  <int> <int> <int>\n1        0      1       0     0       0     0       0       0      0    30    79\n# ... with 15 more variables: Goal <int>, Assist <int>, `Goal + Assist` <int>,\n#   `Goal+Penalty kick` <int>, `Penalty Kick` <int>,\n#   `Penalty Kick Attempted` <int>, `Yellow Card` <int>, `Red Card` <int>,\n#   `Expected Goal` <int>, `Non-penalty Expected Goal` <int>,\n#   `Expected Assisted Goal` <int>,\n#   `Non-penalty Expected Goal + Expected Assisted Goal` <int>,\n#   `Progressive Carries` <int>, `Progressive Passes` <int>, ...\n\n\n\ndata %>%\n  filter(is.na(Nation))\n\n# A tibble: 1 x 26\n  Player~1 Nation Posit~2 Squad Compi~3 Age   Born ~4 Match~5 Starts   MIn `90s`\n  <chr>    <chr>  <chr>   <chr> <chr>   <chr>   <dbl>   <dbl>  <dbl> <dbl> <dbl>\n1 David O~ <NA>   FW      Crys~ Premie~ 17-3~    2005       1      1    NA    NA\n# ... with 15 more variables: Goal <dbl>, Assist <dbl>, `Goal + Assist` <dbl>,\n#   `Goal+Penalty kick` <dbl>, `Penalty Kick` <dbl>,\n#   `Penalty Kick Attempted` <dbl>, `Yellow Card` <dbl>, `Red Card` <dbl>,\n#   `Expected Goal` <dbl>, `Non-penalty Expected Goal` <dbl>,\n#   `Expected Assisted Goal` <dbl>,\n#   `Non-penalty Expected Goal + Expected Assisted Goal` <dbl>,\n#   `Progressive Carries` <dbl>, `Progressive Passes` <dbl>, ...\n\n\n\n\nCheck unique values\n\ndata %>%\n  map_df(.f = \\(x) length(unique(x)))\n\n# A tibble: 1 x 26\n  Player~1 Nation Posit~2 Squad Compi~3   Age Born ~4 Match~5 Starts   MIn `90s`\n     <int>  <int>   <int> <int>   <int> <int>   <int>   <int>  <int> <int> <int>\n1     2599    105      10    98       5  2093      27      28    117  1468   272\n# ... with 15 more variables: Goal <int>, Assist <int>, `Goal + Assist` <int>,\n#   `Goal+Penalty kick` <int>, `Penalty Kick` <int>,\n#   `Penalty Kick Attempted` <int>, `Yellow Card` <int>, `Red Card` <int>,\n#   `Expected Goal` <int>, `Non-penalty Expected Goal` <int>,\n#   `Expected Assisted Goal` <int>,\n#   `Non-penalty Expected Goal + Expected Assisted Goal` <int>,\n#   `Progressive Carries` <int>, `Progressive Passes` <int>, ...\n\n\n\ndata %>%\n  group_by(Nation) %>%\n  count(sort = TRUE) %>%\n  mutate(prop = 100*n/nrow(data))\n\n# A tibble: 105 x 3\n# Groups:   Nation [105]\n   Nation     n  prop\n   <chr>  <int> <dbl>\n 1 ESP      385 13.9 \n 2 FRA      377 13.6 \n 3 GER      231  8.34\n 4 ITA      220  7.95\n 5 ENG      188  6.79\n 6 BRA      106  3.83\n 7 ARG       77  2.78\n 8 POR       72  2.60\n 9 NED       70  2.53\n10 BEL       48  1.73\n# ... with 95 more rows"
  },
  {
    "objectID": "posts/30-days-charts-challenge-day02/index.html#plot-nation-per-league",
    "href": "posts/30-days-charts-challenge-day02/index.html#plot-nation-per-league",
    "title": "30 days chart challenge - day 02",
    "section": "Plot Nation per league",
    "text": "Plot Nation per league\n\ndata %>%\n  select(Nation,\"League\" = Compition) %>%\n  group_by(Nation,League) %>%\n  count(sort = TRUE) %>%\n  filter(n > 20) %>%\n  ggplot(aes(fill = Nation, values = n)) +\n  geom_waffle(\n    aes(colour = Nation),\n    n_rows = 10, \n    size = .5, colour = \"grey50\", \n    flip = TRUE,\n    make_proportional = TRUE\n    ) +\n  facet_wrap(~League, ncol = 5,strip.position = \"bottom\") +\n  #expand_limits(x=c(0,0), y=c(0,0)) +\n  labs(\n    title = \"2022-2023 Top 5 Football Leagues Nationalities\",\n    subtitle = \"Source: https://www.kaggle.com/datasets/joyshil0599/2022-2023-top-5-football-leagues-player-stats\",\n    caption = \"Only countries with more than 20 player in each league\", \n    fill = NULL,\n    colour = NULL) +\n  scale_fill_manual(values = c(\"ALG\" = \"#006331\",\n                               \"ARG\" = \"#70a7d8\",\n                               \"AUT\" =  \"#e62837\",\n                               \"BRA\" = \"#f6d900\",\n                               \"ENG\" = \"white\",\n                               \"ESP\" = \"#c00b1d\",\n                               \"FRA\" = \"#002551\",\n                               \"GER\" = \"black\",\n                               \"ITA\" = \"#0b8dcd\",\n                               \"NED\" = \"orange\",\n                               \"POR\" = \"#e52011\")) + \n  theme_enhance_waffle() +\n  theme_void() +\n  theme(\n    text = element_text(family = \"Segoe UI\"),\n    strip.text.x =  element_text(family = \"Segoe UI\",face = \"italic\",size = 10),\n    strip.background = element_rect(fill = \"grey99\",\n                                    linetype = \"blank\"),\n    plot.title = element_text(family = \"Segoe UI\",hjust = .5,size = 25),\n    plot.subtitle = element_text(family = \"Segoe UI\",hjust = .5,size = 6)\n  )\n\n\n\n\n\nggsave(filename = \"plot_day02.png\",bg = \"white\",dpi = 400,width = 10)\n\nSaving 10 x 5 in image"
  }
]