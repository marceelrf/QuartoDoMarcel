<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Quarto do Marcel</title>
<link>https://quartodomarcel.netlify.app/index.html</link>
<atom:link href="https://quartodomarcel.netlify.app/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.2.335</generator>
<lastBuildDate>Tue, 04 Apr 2023 03:00:00 GMT</lastBuildDate>
<item>
  <title>30 days chart challenge - day 04</title>
  <dc:creator>Marcel Ferreira</dc:creator>
  <link>https://quartodomarcel.netlify.app/posts/30-days-charts-challenge-day04/index.html</link>
  <description><![CDATA[ 




<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --
v dplyr     1.1.0     v readr     2.1.4
v forcats   1.0.0     v stringr   1.5.0
v ggplot2   3.4.1     v tibble    3.1.8
v lubridate 1.9.2     v tidyr     1.3.0
v purrr     1.0.1     
-- Conflicts ------------------------------------------ tidyverse_conflicts() --
x dplyr::filter() masks stats::filter()
x dplyr::lag()    masks stats::lag()
i Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">library</span>(extrafont)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Registering fonts with R</code></pre>
</div>
</div>
<section id="data" class="level2">
<h2 class="anchored" data-anchor-id="data">Data</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_csv</span>(<span class="st" style="color: #20794D;">"athlete_events.csv"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Rows: 271116 Columns: 15
-- Column specification --------------------------------------------------------
Delimiter: ","
chr (10): Name, Sex, Team, NOC, Games, Season, City, Sport, Event, Medal
dbl  (5): ID, Age, Height, Weight, Year

i Use `spec()` to retrieve the full column specification for this data.
i Specify the column types or set `show_col_types = FALSE` to quiet this message.</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">glimpse</span>(data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 271,116
Columns: 15
$ ID     &lt;dbl&gt; 1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, ~
$ Name   &lt;chr&gt; "A Dijiang", "A Lamusi", "Gunnar Nielsen Aaby", "Edgar Lindenau~
$ Sex    &lt;chr&gt; "M", "M", "M", "M", "F", "F", "F", "F", "F", "F", "M", "M", "M"~
$ Age    &lt;dbl&gt; 24, 23, 24, 34, 21, 21, 25, 25, 27, 27, 31, 31, 31, 31, 33, 33,~
$ Height &lt;dbl&gt; 180, 170, NA, NA, 185, 185, 185, 185, 185, 185, 188, 188, 188, ~
$ Weight &lt;dbl&gt; 80, 60, NA, NA, 82, 82, 82, 82, 82, 82, 75, 75, 75, 75, 75, 75,~
$ Team   &lt;chr&gt; "China", "China", "Denmark", "Denmark/Sweden", "Netherlands", "~
$ NOC    &lt;chr&gt; "CHN", "CHN", "DEN", "DEN", "NED", "NED", "NED", "NED", "NED", ~
$ Games  &lt;chr&gt; "1992 Summer", "2012 Summer", "1920 Summer", "1900 Summer", "19~
$ Year   &lt;dbl&gt; 1992, 2012, 1920, 1900, 1988, 1988, 1992, 1992, 1994, 1994, 199~
$ Season &lt;chr&gt; "Summer", "Summer", "Summer", "Summer", "Winter", "Winter", "Wi~
$ City   &lt;chr&gt; "Barcelona", "London", "Antwerpen", "Paris", "Calgary", "Calgar~
$ Sport  &lt;chr&gt; "Basketball", "Judo", "Football", "Tug-Of-War", "Speed Skating"~
$ Event  &lt;chr&gt; "Basketball Men's Basketball", "Judo Men's Extra-Lightweight", ~
$ Medal  &lt;chr&gt; NA, NA, NA, "Gold", NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,~</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">(</span>
<span id="cb9-2">  Brazil_summary <span class="ot" style="color: #003B4F;">&lt;-</span> data <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-3">    <span class="fu" style="color: #4758AB;">filter</span>(Team <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Brazil"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">filter</span>(Season <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Summer"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb9-4">    <span class="fu" style="color: #4758AB;">distinct</span>(Season, Year, Event, Medal) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb9-5">    <span class="fu" style="color: #4758AB;">select</span>(Year,Medal) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb9-6">    <span class="fu" style="color: #4758AB;">group_by</span>(Year) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb9-7">    <span class="fu" style="color: #4758AB;">count</span>(Medal) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb9-8">    <span class="fu" style="color: #4758AB;">pivot_wider</span>(<span class="at" style="color: #657422;">names_from =</span> Medal,<span class="at" style="color: #657422;">values_from =</span> n,<span class="at" style="color: #657422;">values_fill =</span> <span class="dv" style="color: #AD0000;">0</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb9-9">    <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="st" style="color: #20794D;">"NA"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb9-10">    <span class="fu" style="color: #4758AB;">pivot_longer</span>(<span class="at" style="color: #657422;">cols =</span> <span class="sc" style="color: #5E5E5E;">-</span>Year,</span>
<span id="cb9-11">                 <span class="at" style="color: #657422;">names_to =</span> <span class="st" style="color: #20794D;">"Medal"</span>,</span>
<span id="cb9-12">                 <span class="at" style="color: #657422;">values_to =</span> <span class="st" style="color: #20794D;">"n"</span>)</span>
<span id="cb9-13">  )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 69 x 3
# Groups:   Year [23]
    Year Medal      n
   &lt;dbl&gt; &lt;chr&gt;  &lt;int&gt;
 1  1900 Bronze     0
 2  1900 Gold       0
 3  1900 Silver     0
 4  1920 Bronze     1
 5  1920 Gold       1
 6  1920 Silver     1
 7  1924 Bronze     0
 8  1924 Gold       0
 9  1924 Silver     0
10  1932 Bronze     0
# ... with 59 more rows</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;">#Data</span></span>
<span id="cb11-2">Brazil_summary <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">Medal =</span> <span class="fu" style="color: #4758AB;">factor</span>(Medal,<span class="at" style="color: #657422;">levels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Gold"</span>,<span class="st" style="color: #20794D;">"Silver"</span>,<span class="st" style="color: #20794D;">"Bronze"</span>))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb11-4">  <span class="co" style="color: #5E5E5E;">#Aesthetics + Geometries</span></span>
<span id="cb11-5">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> Year, <span class="at" style="color: #657422;">y =</span> n, <span class="at" style="color: #657422;">col =</span> Medal, <span class="at" style="color: #657422;">group =</span> Medal)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-6">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">4</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb11-7">  <span class="fu" style="color: #4758AB;">geom_line</span>(<span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">2</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-8">  <span class="co" style="color: #5E5E5E;">#Scales customizations</span></span>
<span id="cb11-9">  <span class="fu" style="color: #4758AB;">scale_x_continuous</span>(<span class="at" style="color: #657422;">breaks =</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="at" style="color: #657422;">from =</span> <span class="dv" style="color: #AD0000;">1896</span>,</span>
<span id="cb11-10">                                  <span class="at" style="color: #657422;">to =</span> <span class="dv" style="color: #AD0000;">2016</span>,</span>
<span id="cb11-11">                                  <span class="at" style="color: #657422;">by =</span> <span class="dv" style="color: #AD0000;">8</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-12">  <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(<span class="at" style="color: #657422;">breaks =</span> <span class="dv" style="color: #AD0000;">0</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">11</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-13">  <span class="fu" style="color: #4758AB;">scale_color_manual</span>(<span class="at" style="color: #657422;">values =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"#FFD700"</span>,</span>
<span id="cb11-14">                                <span class="st" style="color: #20794D;">"#C0C0C0"</span>,</span>
<span id="cb11-15">                                <span class="st" style="color: #20794D;">"#cd7f32"</span>)) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb11-16">  <span class="co" style="color: #5E5E5E;">#Annotations 1</span></span>
<span id="cb11-17">  <span class="fu" style="color: #4758AB;">annotate</span>(<span class="at" style="color: #657422;">geom =</span> <span class="st" style="color: #20794D;">"text"</span>,</span>
<span id="cb11-18">           <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"No athletes</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">in the first games"</span>,</span>
<span id="cb11-19">           <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">1918</span>,<span class="at" style="color: #657422;">y =</span> <span class="dv" style="color: #AD0000;">6</span>,</span>
<span id="cb11-20">           <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">9</span>,</span>
<span id="cb11-21">           <span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">"Berlin Sans FB"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-22">  <span class="fu" style="color: #4758AB;">annotate</span>(<span class="at" style="color: #657422;">geom =</span> <span class="st" style="color: #20794D;">"curve"</span>,</span>
<span id="cb11-23">           <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">1905</span>,<span class="at" style="color: #657422;">xend =</span> <span class="dv" style="color: #AD0000;">1896</span>,</span>
<span id="cb11-24">           <span class="at" style="color: #657422;">y =</span> <span class="dv" style="color: #AD0000;">6</span>, <span class="at" style="color: #657422;">yend =</span> .<span class="dv" style="color: #AD0000;">5</span>,</span>
<span id="cb11-25">           <span class="at" style="color: #657422;">arrow =</span> <span class="fu" style="color: #4758AB;">arrow</span>()) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-26">  <span class="fu" style="color: #4758AB;">annotate</span>(<span class="at" style="color: #657422;">geom =</span> <span class="st" style="color: #20794D;">"rect"</span>,</span>
<span id="cb11-27">           <span class="at" style="color: #657422;">xmin =</span> <span class="dv" style="color: #AD0000;">2014</span>,<span class="at" style="color: #657422;">xmax =</span> <span class="dv" style="color: #AD0000;">2018</span>,</span>
<span id="cb11-28">           <span class="at" style="color: #657422;">ymin =</span> <span class="dv" style="color: #AD0000;">0</span>,<span class="at" style="color: #657422;">ymax =</span> <span class="dv" style="color: #AD0000;">9</span>,</span>
<span id="cb11-29">           <span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">"green"</span>,<span class="at" style="color: #657422;">alpha =</span> .<span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb11-30">           ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-31">  <span class="fu" style="color: #4758AB;">annotate</span>(<span class="at" style="color: #657422;">geom =</span> <span class="st" style="color: #20794D;">"text"</span>,</span>
<span id="cb11-32">           <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Rio</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">2016"</span>,</span>
<span id="cb11-33">           <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">2016</span>,<span class="at" style="color: #657422;">y =</span> <span class="fl" style="color: #AD0000;">1.5</span>,</span>
<span id="cb11-34">           <span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">"Berlin Sans FB"</span>,<span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">"navy"</span>,</span>
<span id="cb11-35">           <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-36">  <span class="co" style="color: #5E5E5E;">#Labels</span></span>
<span id="cb11-37">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Brazil's medals in the Olympics (1896-2016)"</span>,</span>
<span id="cb11-38">       <span class="at" style="color: #657422;">subtitle =</span> <span class="st" style="color: #20794D;">"Source: https://www.kaggle.com/code/celiomatos/brazil-score-in-olympics/input?select=athlete_events.csv"</span>,</span>
<span id="cb11-39">       <span class="at" style="color: #657422;">y =</span> <span class="st" style="color: #20794D;">"Total of medals"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-40">  <span class="co" style="color: #5E5E5E;">#Theme</span></span>
<span id="cb11-41">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">text =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">"Berlin Sans FB"</span>),</span>
<span id="cb11-42">        <span class="at" style="color: #657422;">plot.title =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">26</span>,<span class="at" style="color: #657422;">hjust =</span> .<span class="dv" style="color: #AD0000;">5</span>,<span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">"Berlin Sans FB"</span>),</span>
<span id="cb11-43">        <span class="at" style="color: #657422;">plot.subtitle =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">9</span>,<span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">"Berlin Sans FB"</span>),</span>
<span id="cb11-44">        <span class="at" style="color: #657422;">panel.background =</span> <span class="fu" style="color: #4758AB;">element_rect</span>(<span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">"white"</span>),</span>
<span id="cb11-45">        <span class="at" style="color: #657422;">axis.text =</span>  <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">15</span>),</span>
<span id="cb11-46">        <span class="at" style="color: #657422;">axis.title =</span>  <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">20</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.
i Please use `linewidth` instead.</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://quartodomarcel.netlify.app/posts/30-days-charts-challenge-day04/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;">ggsave</span>(<span class="at" style="color: #657422;">filename =</span> <span class="st" style="color: #20794D;">"plot_final_day04.png"</span>,<span class="at" style="color: #657422;">width =</span> <span class="dv" style="color: #AD0000;">12</span>,<span class="at" style="color: #657422;">dpi =</span> <span class="dv" style="color: #AD0000;">600</span>,<span class="at" style="color: #657422;">bg =</span> <span class="st" style="color: #20794D;">"white"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Saving 12 x 5 in image</code></pre>
</div>
</div>


</section>

 ]]></description>
  <category>R</category>
  <category>Dataviz</category>
  <guid>https://quartodomarcel.netlify.app/posts/30-days-charts-challenge-day04/index.html</guid>
  <pubDate>Tue, 04 Apr 2023 03:00:00 GMT</pubDate>
  <media:content url="https://quartodomarcel.netlify.app/posts/30-days-charts-challenge-day04/blue-81847_1920.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>30 days chart challenge - day 03</title>
  <dc:creator>Marcel Ferreira</dc:creator>
  <link>https://quartodomarcel.netlify.app/posts/30-days-charts-challenge-day03/index.html</link>
  <description><![CDATA[ 




<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --
v dplyr     1.1.0     v readr     2.1.4
v forcats   1.0.0     v stringr   1.5.0
v ggplot2   3.4.1     v tibble    3.1.8
v lubridate 1.9.2     v tidyr     1.3.0
v purrr     1.0.1     
-- Conflicts ------------------------------------------ tidyverse_conflicts() --
x dplyr::filter() masks stats::filter()
x dplyr::lag()    masks stats::lag()
i Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors</code></pre>
</div>
</div>
<section id="data" class="level2">
<h2 class="anchored" data-anchor-id="data">Data</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_csv</span>(<span class="st" style="color: #20794D;">"NYC_dogs_clean.csv"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>New names:
Rows: 121862 Columns: 17
-- Column specification
-------------------------------------------------------- Delimiter: "," chr
(9): AnimalName, AnimalGender, AnimalBirthMonth, BreedName, Borough, Cen... dbl
(8): ...1, X, RowNumber, ZipCode, CommunityDistrict, CityCouncilDistrict...
i Use `spec()` to retrieve the full column specification for this data. i
Specify the column types or set `show_col_types = FALSE` to quiet this message.
* `` -&gt; `...1`</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">glimpse</span>(data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 121,862
Columns: 17
$ ...1                    &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,~
$ X                       &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,~
$ RowNumber               &lt;dbl&gt; 1753, 2415, 3328, 7537, 8487, 10503, 11682, 12~
$ AnimalName              &lt;chr&gt; "SHADOW", "ROCCO", "LUIGI", "PETUNIA", "ROMEO"~
$ AnimalGender            &lt;chr&gt; "M", "M", "M", "F", "M", "M", "M", "F", "F", "~
$ AnimalBirthMonth        &lt;chr&gt; "01/01/2000 12:00:00 AM", "10/01/2011 12:00:00~
$ BreedName               &lt;chr&gt; "Beagle", "Boxer", "Maltese", "Pug", "Maltese"~
$ Borough                 &lt;chr&gt; "Brooklyn", "Brooklyn", "Bronx", "Brooklyn", "~
$ ZipCode                 &lt;dbl&gt; 11236, 11210, 10464, 11221, 10451, 11225, 1002~
$ CommunityDistrict       &lt;dbl&gt; 318, 314, 210, 304, 201, 309, 108, 502, 310, 2~
$ CensusTract2010         &lt;chr&gt; "1014", "756", "516", "419", "65", "800", "124~
$ NTA                     &lt;chr&gt; "BK50", "BK43", "BX10", "BK78", "BX34", "BK60"~
$ CityCouncilDistrict     &lt;dbl&gt; 46, 45, 13, 34, 17, 40, 5, 50, 43, 14, 2, 22, ~
$ CongressionalDistrict   &lt;dbl&gt; 8, 9, 14, 7, 15, 9, 12, 11, 11, 13, 12, 14, 8,~
$ StateSenatorialDistrict &lt;dbl&gt; 19, 17, 34, 18, 32, 20, 28, 23, 22, 33, 28, 12~
$ LicenseIssuedDate       &lt;chr&gt; "12/29/2014", "01/07/2015", "01/17/2015", "03/~
$ LicenseExpiredDate      &lt;chr&gt; "01/30/2016", "01/30/2016", "02/02/2016", "03/~</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;">group_by</span>(Borough) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;">count</span>(AnimalName,<span class="at" style="color: #657422;">sort =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 28,872 x 3
# Groups:   Borough [5]
   Borough   AnimalName            n
   &lt;chr&gt;     &lt;chr&gt;             &lt;int&gt;
 1 Brooklyn  UNKNOWN             944
 2 Manhattan UNKNOWN             944
 3 Queens    NAME NOT PROVIDED   649
 4 Brooklyn  NAME NOT PROVIDED   462
 5 Manhattan CHARLIE             390
 6 Manhattan LUCY                358
 7 Manhattan LOLA                346
 8 Queens    UNKNOWN             338
 9 Manhattan NAME NOT PROVIDED   334
10 Queens    MAX                 334
# ... with 28,862 more rows</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">nyc_squirrels <span class="ot" style="color: #003B4F;">&lt;-</span> readr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">read_csv</span>(<span class="st" style="color: #20794D;">"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-10-29/nyc_squirrels.csv"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Rows: 3023 Columns: 36
-- Column specification --------------------------------------------------------
Delimiter: ","
chr (14): unique_squirrel_id, hectare, shift, age, primary_fur_color, highli...
dbl  (9): long, lat, date, hectare_squirrel_number, zip_codes, community_dis...
lgl (13): running, chasing, climbing, eating, foraging, kuks, quaas, moans, ...

i Use `spec()` to retrieve the full column specification for this data.
i Specify the column types or set `show_col_types = FALSE` to quiet this message.</code></pre>
</div>
</div>


</section>

 ]]></description>
  <category>R</category>
  <category>Dataviz</category>
  <guid>https://quartodomarcel.netlify.app/posts/30-days-charts-challenge-day03/index.html</guid>
  <pubDate>Mon, 03 Apr 2023 03:00:00 GMT</pubDate>
  <media:content url="https://quartodomarcel.netlify.app/posts/30-days-charts-challenge-day03/brooklyn-nyc-skyline-pav-maxine.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>30 days chart challenge - day 02</title>
  <dc:creator>Marcel Ferreira</dc:creator>
  <link>https://quartodomarcel.netlify.app/posts/30-days-charts-challenge-day02/index.html</link>
  <description><![CDATA[ 




<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --
v dplyr     1.1.0     v readr     2.1.4
v forcats   1.0.0     v stringr   1.5.0
v ggplot2   3.4.1     v tibble    3.1.8
v lubridate 1.9.2     v tidyr     1.3.0
v purrr     1.0.1     
-- Conflicts ------------------------------------------ tidyverse_conflicts() --
x dplyr::filter() masks stats::filter()
x dplyr::lag()    masks stats::lag()
i Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">library</span>(waffle)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;">library</span>(cowplot)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'cowplot'

The following object is masked from 'package:lubridate':

    stamp</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">library</span>(extrafont)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Registering fonts with R</code></pre>
</div>
</div>
<section id="data" class="level2">
<h2 class="anchored" data-anchor-id="data">Data</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_csv</span>(<span class="st" style="color: #20794D;">"player_stats.csv"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Rows: 2769 Columns: 26
-- Column specification --------------------------------------------------------
Delimiter: ","
chr  (6): Player name, Nation, Position, Squad, Compition, Age
dbl (19): Born year, Match played, Starts, 90s, Goal, Assist, Goal + Assist,...
num  (1): MIn

i Use `spec()` to retrieve the full column specification for this data.
i Specify the column types or set `show_col_types = FALSE` to quiet this message.</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;">glimpse</span>(data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 2,769
Columns: 26
$ `Player name`                                        &lt;chr&gt; "Brenden Aaronson~
$ Nation                                               &lt;chr&gt; "USA", "USA", "MA~
$ Position                                             &lt;chr&gt; "MF,FW", "MF", "D~
$ Squad                                                &lt;chr&gt; "Leeds United", "~
$ Compition                                            &lt;chr&gt; "Premier League",~
$ Age                                                  &lt;chr&gt; "22-157", "19-214~
$ `Born year`                                          &lt;dbl&gt; 2000, 2003, 1987,~
$ `Match played`                                       &lt;dbl&gt; 26, 1, 28, 20, 26~
$ Starts                                               &lt;dbl&gt; 23, 8, 28, 14, 26~
$ MIn                                                  &lt;dbl&gt; 1948.0, 0.1, 2520~
$ `90s`                                                &lt;dbl&gt; 21.6, NA, 28.0, 1~
$ Goal                                                 &lt;dbl&gt; 1.0, NA, 1.0, 0.9~
$ Assist                                               &lt;dbl&gt; 2.0, NA, 1.0, 1.0~
$ `Goal + Assist`                                      &lt;dbl&gt; 3.0, NA, 2.0, 0.9~
$ `Goal+Penalty kick`                                  &lt;dbl&gt; 1.0, NA, 1.0, 1.9~
$ `Penalty Kick`                                       &lt;dbl&gt; 0, 0, 0, 0, 0, 0,~
$ `Penalty Kick Attempted`                             &lt;dbl&gt; 0, 0, 0, 0, 0, 0,~
$ `Yellow Card`                                        &lt;dbl&gt; 2.0, NA, 3.0, 2.8~
$ `Red Card`                                           &lt;dbl&gt; 0.00, 0.00, 0.00,~
$ `Expected Goal`                                      &lt;dbl&gt; 2.9, 0.0, 1.8, 34~
$ `Non-penalty Expected Goal`                          &lt;dbl&gt; 2.9, 0.0, 1.8, 84~
$ `Expected Assisted Goal`                             &lt;dbl&gt; 3.7, 0.0, 0.4, 74~
$ `Non-penalty Expected Goal + Expected Assisted Goal` &lt;dbl&gt; 6.60, 0.00, 2.20,~
$ `Progressive Carries`                                &lt;dbl&gt; 36.00, 0.00, 20.0~
$ `Progressive Passes`                                 &lt;dbl&gt; 72.00, 0.00, 147.~
$ `Progressive Passes Receive`                         &lt;dbl&gt; 120.00, 0.00, 5.0~</code></pre>
</div>
</div>
<section id="check-nas" class="level3">
<h3 class="anchored" data-anchor-id="check-nas">Check NA’s</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="fu" style="color: #4758AB;">across</span>(<span class="fu" style="color: #4758AB;">everything</span>(), is.na)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;">summarise</span>(<span class="fu" style="color: #4758AB;">across</span>(<span class="fu" style="color: #4758AB;">everything</span>(),sum))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 x 26
  Player~1 Nation Posit~2 Squad Compi~3   Age Born ~4 Match~5 Starts   MIn `90s`
     &lt;int&gt;  &lt;int&gt;   &lt;int&gt; &lt;int&gt;   &lt;int&gt; &lt;int&gt;   &lt;int&gt;   &lt;int&gt;  &lt;int&gt; &lt;int&gt; &lt;int&gt;
1        0      1       0     0       0     0       0       0      0    30    79
# ... with 15 more variables: Goal &lt;int&gt;, Assist &lt;int&gt;, `Goal + Assist` &lt;int&gt;,
#   `Goal+Penalty kick` &lt;int&gt;, `Penalty Kick` &lt;int&gt;,
#   `Penalty Kick Attempted` &lt;int&gt;, `Yellow Card` &lt;int&gt;, `Red Card` &lt;int&gt;,
#   `Expected Goal` &lt;int&gt;, `Non-penalty Expected Goal` &lt;int&gt;,
#   `Expected Assisted Goal` &lt;int&gt;,
#   `Non-penalty Expected Goal + Expected Assisted Goal` &lt;int&gt;,
#   `Progressive Carries` &lt;int&gt;, `Progressive Passes` &lt;int&gt;, ...</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;">filter</span>(<span class="fu" style="color: #4758AB;">is.na</span>(Nation))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 x 26
  Player~1 Nation Posit~2 Squad Compi~3 Age   Born ~4 Match~5 Starts   MIn `90s`
  &lt;chr&gt;    &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1 David O~ &lt;NA&gt;   FW      Crys~ Premie~ 17-3~    2005       1      1    NA    NA
# ... with 15 more variables: Goal &lt;dbl&gt;, Assist &lt;dbl&gt;, `Goal + Assist` &lt;dbl&gt;,
#   `Goal+Penalty kick` &lt;dbl&gt;, `Penalty Kick` &lt;dbl&gt;,
#   `Penalty Kick Attempted` &lt;dbl&gt;, `Yellow Card` &lt;dbl&gt;, `Red Card` &lt;dbl&gt;,
#   `Expected Goal` &lt;dbl&gt;, `Non-penalty Expected Goal` &lt;dbl&gt;,
#   `Expected Assisted Goal` &lt;dbl&gt;,
#   `Non-penalty Expected Goal + Expected Assisted Goal` &lt;dbl&gt;,
#   `Progressive Carries` &lt;dbl&gt;, `Progressive Passes` &lt;dbl&gt;, ...</code></pre>
</div>
</div>
</section>
<section id="check-unique-values" class="level3">
<h3 class="anchored" data-anchor-id="check-unique-values">Check unique values</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb15-2">  <span class="fu" style="color: #4758AB;">map_df</span>(<span class="at" style="color: #657422;">.f =</span> \(x) <span class="fu" style="color: #4758AB;">length</span>(<span class="fu" style="color: #4758AB;">unique</span>(x)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 x 26
  Player~1 Nation Posit~2 Squad Compi~3   Age Born ~4 Match~5 Starts   MIn `90s`
     &lt;int&gt;  &lt;int&gt;   &lt;int&gt; &lt;int&gt;   &lt;int&gt; &lt;int&gt;   &lt;int&gt;   &lt;int&gt;  &lt;int&gt; &lt;int&gt; &lt;int&gt;
1     2599    105      10    98       5  2093      27      28    117  1468   272
# ... with 15 more variables: Goal &lt;int&gt;, Assist &lt;int&gt;, `Goal + Assist` &lt;int&gt;,
#   `Goal+Penalty kick` &lt;int&gt;, `Penalty Kick` &lt;int&gt;,
#   `Penalty Kick Attempted` &lt;int&gt;, `Yellow Card` &lt;int&gt;, `Red Card` &lt;int&gt;,
#   `Expected Goal` &lt;int&gt;, `Non-penalty Expected Goal` &lt;int&gt;,
#   `Expected Assisted Goal` &lt;int&gt;,
#   `Non-penalty Expected Goal + Expected Assisted Goal` &lt;int&gt;,
#   `Progressive Carries` &lt;int&gt;, `Progressive Passes` &lt;int&gt;, ...</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;">group_by</span>(Nation) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb17-3">  <span class="fu" style="color: #4758AB;">count</span>(<span class="at" style="color: #657422;">sort =</span> <span class="cn" style="color: #8f5902;">TRUE</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb17-4">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">prop =</span> <span class="dv" style="color: #AD0000;">100</span><span class="sc" style="color: #5E5E5E;">*</span>n<span class="sc" style="color: #5E5E5E;">/</span><span class="fu" style="color: #4758AB;">nrow</span>(data))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 105 x 3
# Groups:   Nation [105]
   Nation     n  prop
   &lt;chr&gt;  &lt;int&gt; &lt;dbl&gt;
 1 ESP      385 13.9 
 2 FRA      377 13.6 
 3 GER      231  8.34
 4 ITA      220  7.95
 5 ENG      188  6.79
 6 BRA      106  3.83
 7 ARG       77  2.78
 8 POR       72  2.60
 9 NED       70  2.53
10 BEL       48  1.73
# ... with 95 more rows</code></pre>
</div>
</div>
</section>
</section>
<section id="plot-nation-per-league" class="level2">
<h2 class="anchored" data-anchor-id="plot-nation-per-league">Plot Nation per league</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb19-2">  <span class="fu" style="color: #4758AB;">select</span>(Nation,<span class="st" style="color: #20794D;">"League"</span> <span class="ot" style="color: #003B4F;">=</span> Compition) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb19-3">  <span class="fu" style="color: #4758AB;">group_by</span>(Nation,League) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb19-4">  <span class="fu" style="color: #4758AB;">count</span>(<span class="at" style="color: #657422;">sort =</span> <span class="cn" style="color: #8f5902;">TRUE</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb19-5">  <span class="fu" style="color: #4758AB;">filter</span>(n <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">20</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb19-6">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill =</span> Nation, <span class="at" style="color: #657422;">values =</span> n)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb19-7">  <span class="fu" style="color: #4758AB;">geom_waffle</span>(</span>
<span id="cb19-8">    <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">colour =</span> Nation),</span>
<span id="cb19-9">    <span class="at" style="color: #657422;">n_rows =</span> <span class="dv" style="color: #AD0000;">10</span>, </span>
<span id="cb19-10">    <span class="at" style="color: #657422;">size =</span> .<span class="dv" style="color: #AD0000;">5</span>, <span class="at" style="color: #657422;">colour =</span> <span class="st" style="color: #20794D;">"grey50"</span>, </span>
<span id="cb19-11">    <span class="at" style="color: #657422;">flip =</span> <span class="cn" style="color: #8f5902;">TRUE</span>,</span>
<span id="cb19-12">    <span class="at" style="color: #657422;">make_proportional =</span> <span class="cn" style="color: #8f5902;">TRUE</span></span>
<span id="cb19-13">    ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb19-14">  <span class="fu" style="color: #4758AB;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;">~</span>League, <span class="at" style="color: #657422;">ncol =</span> <span class="dv" style="color: #AD0000;">5</span>,<span class="at" style="color: #657422;">strip.position =</span> <span class="st" style="color: #20794D;">"bottom"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb19-15">  <span class="co" style="color: #5E5E5E;">#expand_limits(x=c(0,0), y=c(0,0)) +</span></span>
<span id="cb19-16">  <span class="fu" style="color: #4758AB;">labs</span>(</span>
<span id="cb19-17">    <span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"2022-2023 Top 5 Football Leagues Nationalities"</span>,</span>
<span id="cb19-18">    <span class="at" style="color: #657422;">subtitle =</span> <span class="st" style="color: #20794D;">"Source: https://www.kaggle.com/datasets/joyshil0599/2022-2023-top-5-football-leagues-player-stats"</span>,</span>
<span id="cb19-19">    <span class="at" style="color: #657422;">caption =</span> <span class="st" style="color: #20794D;">"Only countries with more than 20 player in each league"</span>, </span>
<span id="cb19-20">    <span class="at" style="color: #657422;">fill =</span> <span class="cn" style="color: #8f5902;">NULL</span>,</span>
<span id="cb19-21">    <span class="at" style="color: #657422;">colour =</span> <span class="cn" style="color: #8f5902;">NULL</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb19-22">  <span class="fu" style="color: #4758AB;">scale_fill_manual</span>(<span class="at" style="color: #657422;">values =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"ALG"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"#006331"</span>,</span>
<span id="cb19-23">                               <span class="st" style="color: #20794D;">"ARG"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"#70a7d8"</span>,</span>
<span id="cb19-24">                               <span class="st" style="color: #20794D;">"AUT"</span> <span class="ot" style="color: #003B4F;">=</span>  <span class="st" style="color: #20794D;">"#e62837"</span>,</span>
<span id="cb19-25">                               <span class="st" style="color: #20794D;">"BRA"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"#f6d900"</span>,</span>
<span id="cb19-26">                               <span class="st" style="color: #20794D;">"ENG"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"white"</span>,</span>
<span id="cb19-27">                               <span class="st" style="color: #20794D;">"ESP"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"#c00b1d"</span>,</span>
<span id="cb19-28">                               <span class="st" style="color: #20794D;">"FRA"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"#002551"</span>,</span>
<span id="cb19-29">                               <span class="st" style="color: #20794D;">"GER"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"black"</span>,</span>
<span id="cb19-30">                               <span class="st" style="color: #20794D;">"ITA"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"#0b8dcd"</span>,</span>
<span id="cb19-31">                               <span class="st" style="color: #20794D;">"NED"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"orange"</span>,</span>
<span id="cb19-32">                               <span class="st" style="color: #20794D;">"POR"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"#e52011"</span>)) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb19-33">  <span class="fu" style="color: #4758AB;">theme_enhance_waffle</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb19-34">  <span class="fu" style="color: #4758AB;">theme_void</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb19-35">  <span class="fu" style="color: #4758AB;">theme</span>(</span>
<span id="cb19-36">    <span class="at" style="color: #657422;">text =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">"Segoe UI"</span>),</span>
<span id="cb19-37">    <span class="at" style="color: #657422;">strip.text.x =</span>  <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">"Segoe UI"</span>,<span class="at" style="color: #657422;">face =</span> <span class="st" style="color: #20794D;">"italic"</span>,<span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">10</span>),</span>
<span id="cb19-38">    <span class="at" style="color: #657422;">strip.background =</span> <span class="fu" style="color: #4758AB;">element_rect</span>(<span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">"grey99"</span>,</span>
<span id="cb19-39">                                    <span class="at" style="color: #657422;">linetype =</span> <span class="st" style="color: #20794D;">"blank"</span>),</span>
<span id="cb19-40">    <span class="at" style="color: #657422;">plot.title =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">"Segoe UI"</span>,<span class="at" style="color: #657422;">hjust =</span> .<span class="dv" style="color: #AD0000;">5</span>,<span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">25</span>),</span>
<span id="cb19-41">    <span class="at" style="color: #657422;">plot.subtitle =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">"Segoe UI"</span>,<span class="at" style="color: #657422;">hjust =</span> .<span class="dv" style="color: #AD0000;">5</span>,<span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">6</span>)</span>
<span id="cb19-42">  )</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://quartodomarcel.netlify.app/posts/30-days-charts-challenge-day02/index_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;">ggsave</span>(<span class="at" style="color: #657422;">filename =</span> <span class="st" style="color: #20794D;">"plot_day02.png"</span>,<span class="at" style="color: #657422;">bg =</span> <span class="st" style="color: #20794D;">"white"</span>,<span class="at" style="color: #657422;">dpi =</span> <span class="dv" style="color: #AD0000;">400</span>,<span class="at" style="color: #657422;">width =</span> <span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Saving 10 x 5 in image</code></pre>
</div>
</div>


</section>

 ]]></description>
  <category>R</category>
  <category>Dataviz</category>
  <guid>https://quartodomarcel.netlify.app/posts/30-days-charts-challenge-day02/index.html</guid>
  <pubDate>Sun, 02 Apr 2023 03:00:00 GMT</pubDate>
  <media:content url="https://quartodomarcel.netlify.app/posts/30-days-charts-challenge-day02/waffles-1044180_1920.png" medium="image" type="image/png"/>
</item>
<item>
  <title>30 days chart challenge - day 01</title>
  <dc:creator>Marcel Ferreira</dc:creator>
  <link>https://quartodomarcel.netlify.app/posts/30-days-charts-challenge-day01/index.html</link>
  <description><![CDATA[ 




<section id="data" class="level2">
<h2 class="anchored" data-anchor-id="data">Data</h2>
<p>The data that I choose to this challenge was the <strong>Marvel Chracters</strong> (https://www.kaggle.com/datasets/syedasimalishah/marvel-chracters).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --
v dplyr     1.1.0     v readr     2.1.4
v forcats   1.0.0     v stringr   1.5.0
v ggplot2   3.4.1     v tibble    3.1.8
v lubridate 1.9.2     v tidyr     1.3.0
v purrr     1.0.1     
-- Conflicts ------------------------------------------ tidyverse_conflicts() --
x dplyr::filter() masks stats::filter()
x dplyr::lag()    masks stats::lag()
i Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">library</span>(ggsankey)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;">library</span>(extrafont)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Registering fonts with R</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">library</span>(cowplot)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'cowplot'

The following object is masked from 'package:lubridate':

    stamp</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_csv</span>(<span class="at" style="color: #657422;">file =</span> <span class="st" style="color: #20794D;">"Marvel Movies.csv"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Rows: 16376 Columns: 11
-- Column specification --------------------------------------------------------
Delimiter: ","
chr (9): name, ID, ALIGN, EYE, HAIR, SEX, GSM, ALIVE, FIRST APPEARANCE
dbl (2): APPEARANCES, Year

i Use `spec()` to retrieve the full column specification for this data.
i Specify the column types or set `show_col_types = FALSE` to quiet this message.</code></pre>
</div>
</div>
<p>Check the NA’s</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">data <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb9-3">    <span class="fu" style="color: #4758AB;">across</span>(<span class="fu" style="color: #4758AB;">everything</span>(),is.na)</span>
<span id="cb9-4">    ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb9-5">  <span class="fu" style="color: #4758AB;">summarise</span>(</span>
<span id="cb9-6">    <span class="fu" style="color: #4758AB;">across</span>(<span class="fu" style="color: #4758AB;">everything</span>(),sum)</span>
<span id="cb9-7">    )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 x 11
   name    ID ALIGN   EYE  HAIR   SEX   GSM ALIVE APPEARANCES FIRST APPE~1  Year
  &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;       &lt;int&gt;        &lt;int&gt; &lt;int&gt;
1     0  3770  2812  9767  4264   854 16286     3        1096          815   815
# ... with abbreviated variable name 1: `FIRST APPEARANCE`</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;">map</span>(<span class="at" style="color: #657422;">.f =</span> \(x) <span class="fu" style="color: #4758AB;">length</span>(<span class="fu" style="color: #4758AB;">unique</span>(x)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$name
[1] 16376

$ID
[1] 5

$ALIGN
[1] 4

$EYE
[1] 25

$HAIR
[1] 26

$SEX
[1] 5

$GSM
[1] 7

$ALIVE
[1] 3

$APPEARANCES
[1] 359

$`FIRST APPEARANCE`
[1] 833

$Year
[1] 76</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">data <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;">group_by</span>(HAIR) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;">count</span>(<span class="at" style="color: #657422;">sort =</span> <span class="cn" style="color: #8f5902;">TRUE</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">prop =</span> <span class="dv" style="color: #AD0000;">100</span><span class="sc" style="color: #5E5E5E;">*</span>n<span class="sc" style="color: #5E5E5E;">/</span><span class="fu" style="color: #4758AB;">nrow</span>(data))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 26 x 3
# Groups:   HAIR [26]
   HAIR           n   prop
   &lt;chr&gt;      &lt;int&gt;  &lt;dbl&gt;
 1 &lt;NA&gt;        4264 26.0  
 2 Black Hair  3755 22.9  
 3 Brown Hair  2339 14.3  
 4 Blond Hair  1582  9.66 
 5 No Hair     1176  7.18 
 6 Bald         838  5.12 
 7 White Hair   754  4.60 
 8 Red Hair     620  3.79 
 9 Grey Hair    531  3.24 
10 Green Hair   117  0.714
# ... with 16 more rows</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">data <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-2">    <span class="fu" style="color: #4758AB;">group_by</span>(EYE) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb15-3">  <span class="fu" style="color: #4758AB;">count</span>(<span class="at" style="color: #657422;">sort =</span> <span class="cn" style="color: #8f5902;">TRUE</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb15-4">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">prop =</span> <span class="dv" style="color: #AD0000;">100</span><span class="sc" style="color: #5E5E5E;">*</span>n<span class="sc" style="color: #5E5E5E;">/</span><span class="fu" style="color: #4758AB;">nrow</span>(data))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 25 x 3
# Groups:   EYE [25]
   EYE             n   prop
   &lt;chr&gt;       &lt;int&gt;  &lt;dbl&gt;
 1 &lt;NA&gt;         9767 59.6  
 2 Blue Eyes    1962 12.0  
 3 Brown Eyes   1924 11.7  
 4 Green Eyes    613  3.74 
 5 Black Eyes    555  3.39 
 6 Red Eyes      508  3.10 
 7 White Eyes    400  2.44 
 8 Yellow Eyes   256  1.56 
 9 Grey Eyes      95  0.580
10 Hazel Eyes     76  0.464
# ... with 15 more rows</code></pre>
</div>
</div>
<p><br>
</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">(df_ex <span class="ot" style="color: #003B4F;">&lt;-</span> data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;">slice_sample</span>(<span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">20</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb17-3">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="fu" style="color: #4758AB;">across</span>(<span class="fu" style="color: #4758AB;">where</span>(is.character),<span class="at" style="color: #657422;">.f =</span> \(x) <span class="fu" style="color: #4758AB;">replace_na</span>(x,<span class="st" style="color: #20794D;">"No Info"</span>))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb17-4">  <span class="fu" style="color: #4758AB;">make_long</span>(<span class="st" style="color: #20794D;">"ID"</span>,<span class="st" style="color: #20794D;">"SEX"</span>,<span class="st" style="color: #20794D;">"EYE"</span>,<span class="st" style="color: #20794D;">"HAIR"</span>,<span class="st" style="color: #20794D;">"ALIGN"</span>,<span class="st" style="color: #20794D;">"ALIVE"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 120 x 4
   x     node              next_x next_node         
   &lt;fct&gt; &lt;chr&gt;             &lt;fct&gt;  &lt;chr&gt;             
 1 ID    No Info           SEX    Male Characters   
 2 SEX   Male Characters   EYE    No Info           
 3 EYE   No Info           HAIR   Grey Hair         
 4 HAIR  Grey Hair         ALIGN  Good Characters   
 5 ALIGN Good Characters   ALIVE  Living Characters 
 6 ALIVE Living Characters &lt;NA&gt;   &lt;NA&gt;              
 7 ID    Secret Identity   SEX    Female Characters 
 8 SEX   Female Characters EYE    No Info           
 9 EYE   No Info           HAIR   Blond Hair        
10 HAIR  Blond Hair        ALIGN  Neutral Characters
# ... with 110 more rows</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">(</span>
<span id="cb19-2">  p1 <span class="ot" style="color: #003B4F;">&lt;-</span> df_ex <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb19-3">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> x,</span>
<span id="cb19-4">             <span class="at" style="color: #657422;">next_x =</span> next_x,</span>
<span id="cb19-5">             <span class="at" style="color: #657422;">node =</span> node,</span>
<span id="cb19-6">             <span class="at" style="color: #657422;">next_node =</span> next_node,</span>
<span id="cb19-7">             <span class="at" style="color: #657422;">fill =</span> <span class="fu" style="color: #4758AB;">factor</span>(node),</span>
<span id="cb19-8">             <span class="at" style="color: #657422;">label =</span> node)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb19-9">  <span class="fu" style="color: #4758AB;">geom_sankey</span>(<span class="at" style="color: #657422;">flow.alpha =</span> .<span class="dv" style="color: #AD0000;">5</span>, <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"black"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb19-10">  <span class="fu" style="color: #4758AB;">geom_sankey_label</span>(<span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">3.5</span>, <span class="at" style="color: #657422;">color =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">"white"</span>,<span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">"Segoe UI"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb19-11">  viridis<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">scale_fill_viridis</span>(<span class="at" style="color: #657422;">option =</span> <span class="st" style="color: #20794D;">"A"</span>,<span class="at" style="color: #657422;">discrete =</span> <span class="cn" style="color: #8f5902;">TRUE</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb19-12">  <span class="fu" style="color: #4758AB;">theme_void</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb19-13">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span><span class="st" style="color: #20794D;">"Marvel movie characters"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb19-14">  <span class="fu" style="color: #4758AB;">theme</span>(</span>
<span id="cb19-15">    <span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"none"</span>,</span>
<span id="cb19-16">    <span class="at" style="color: #657422;">plot.background =</span> <span class="fu" style="color: #4758AB;">element_rect</span>(<span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">"#e8e6d1"</span>,<span class="at" style="color: #657422;">linewidth =</span> <span class="dv" style="color: #AD0000;">0</span>),</span>
<span id="cb19-17">    <span class="at" style="color: #657422;">panel.background =</span> <span class="fu" style="color: #4758AB;">element_rect</span>(<span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">"#e8e6d1"</span>,<span class="at" style="color: #657422;">linewidth =</span> <span class="dv" style="color: #AD0000;">0</span>,<span class="at" style="color: #657422;">linetype =</span> <span class="st" style="color: #20794D;">"blank"</span>),</span>
<span id="cb19-18">    <span class="at" style="color: #657422;">text =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">"Segoe UI"</span>),</span>
<span id="cb19-19">    <span class="at" style="color: #657422;">plot.title =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">"Segoe UI"</span>,<span class="at" style="color: #657422;">face =</span> <span class="st" style="color: #20794D;">"bold"</span>,<span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">30</span>,<span class="at" style="color: #657422;">hjust =</span> .<span class="dv" style="color: #AD0000;">5</span>))</span>
<span id="cb19-20">  )</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://quartodomarcel.netlify.app/posts/30-days-charts-challenge-day01/index_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;">ggdraw</span>(p1) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;">draw_label</span>(<span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"@marceelrf"</span>,<span class="at" style="color: #657422;">x =</span> .<span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">y =</span> <span class="fl" style="color: #AD0000;">0.05</span>,<span class="at" style="color: #657422;">fontfamily =</span> <span class="st" style="color: #20794D;">"Segoe UI"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-3">  <span class="fu" style="color: #4758AB;">draw_image</span>(<span class="at" style="color: #657422;">image =</span> <span class="st" style="color: #20794D;">"Marvel_Logo.svg"</span>,<span class="at" style="color: #657422;">x =</span> .<span class="dv" style="color: #AD0000;">85</span>,<span class="at" style="color: #657422;">y =</span> .<span class="dv" style="color: #AD0000;">01</span>,<span class="at" style="color: #657422;">width =</span> <span class="fl" style="color: #AD0000;">0.13</span>, <span class="at" style="color: #657422;">height =</span> <span class="fl" style="color: #AD0000;">0.2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): métrica da
fonte desconhecida para caractere 0x4d</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): fonte com
largura desconhecida para caractere 0x67</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): fonte com
largura desconhecida para caractere 0x6a</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): fonte com
largura desconhecida para caractere 0x70</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): fonte com
largura desconhecida para caractere 0x71</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): fonte com
largura desconhecida para caractere 0x79</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): fonte com
largura desconhecida para caractere 0x51</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://quartodomarcel.netlify.app/posts/30-days-charts-challenge-day01/index_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="final-plot" class="level2">
<h2 class="anchored" data-anchor-id="final-plot">Final plot</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">(plot_final <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb28-2">    data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb28-3">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="fu" style="color: #4758AB;">across</span>(<span class="fu" style="color: #4758AB;">where</span>(is.character),<span class="at" style="color: #657422;">.f =</span> \(x) <span class="fu" style="color: #4758AB;">replace_na</span>(x,<span class="st" style="color: #20794D;">"No Info"</span>))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb28-4">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">HAIR =</span> <span class="fu" style="color: #4758AB;">fct_lump_prop</span>(HAIR, <span class="fl" style="color: #AD0000;">0.05</span>),</span>
<span id="cb28-5">           <span class="at" style="color: #657422;">EYE =</span> <span class="fu" style="color: #4758AB;">fct_lump_prop</span>(EYE, <span class="fl" style="color: #AD0000;">0.05</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb28-6">  <span class="fu" style="color: #4758AB;">make_long</span>(<span class="st" style="color: #20794D;">"ID"</span>,<span class="st" style="color: #20794D;">"SEX"</span>,<span class="st" style="color: #20794D;">"EYE"</span>,<span class="st" style="color: #20794D;">"HAIR"</span>,<span class="st" style="color: #20794D;">"ALIGN"</span>,<span class="st" style="color: #20794D;">"ALIVE"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb28-7">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> x,</span>
<span id="cb28-8">             <span class="at" style="color: #657422;">next_x =</span> next_x,</span>
<span id="cb28-9">             <span class="at" style="color: #657422;">node =</span> node,</span>
<span id="cb28-10">             <span class="at" style="color: #657422;">next_node =</span> next_node,</span>
<span id="cb28-11">             <span class="at" style="color: #657422;">fill =</span> <span class="fu" style="color: #4758AB;">factor</span>(node),</span>
<span id="cb28-12">             <span class="at" style="color: #657422;">label =</span> node)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb28-13">  <span class="fu" style="color: #4758AB;">geom_sankey</span>(<span class="at" style="color: #657422;">flow.alpha =</span> .<span class="dv" style="color: #AD0000;">5</span>, <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"black"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb28-14">  <span class="fu" style="color: #4758AB;">geom_sankey_label</span>(<span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">3.5</span>, <span class="at" style="color: #657422;">color =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">"white"</span>,<span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">"Segoe UI"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb28-15">  viridis<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">scale_fill_viridis</span>(<span class="at" style="color: #657422;">option =</span> <span class="st" style="color: #20794D;">"A"</span>,<span class="at" style="color: #657422;">discrete =</span> <span class="cn" style="color: #8f5902;">TRUE</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb28-16">  <span class="fu" style="color: #4758AB;">theme_void</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb28-17">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Marvel movie characters"</span>,</span>
<span id="cb28-18">       <span class="at" style="color: #657422;">subtitle =</span> <span class="st" style="color: #20794D;">"Source: https://www.kaggle.com/datasets/syedasimalishah/marvel-chracters"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb28-19">  <span class="fu" style="color: #4758AB;">theme</span>(</span>
<span id="cb28-20">    <span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"none"</span>,</span>
<span id="cb28-21">    <span class="at" style="color: #657422;">plot.background =</span> <span class="fu" style="color: #4758AB;">element_rect</span>(<span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">"#e8e6d1"</span>,<span class="at" style="color: #657422;">linewidth =</span> <span class="dv" style="color: #AD0000;">0</span>),</span>
<span id="cb28-22">    <span class="at" style="color: #657422;">panel.background =</span> <span class="fu" style="color: #4758AB;">element_rect</span>(<span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">"#e8e6d1"</span>,<span class="at" style="color: #657422;">linewidth =</span> <span class="dv" style="color: #AD0000;">0</span>,<span class="at" style="color: #657422;">linetype =</span> <span class="st" style="color: #20794D;">"blank"</span>), <span class="at" style="color: #657422;">plot.subtitle =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">"Segoe UI"</span>,<span class="at" style="color: #657422;">face =</span> <span class="st" style="color: #20794D;">"italic"</span>,<span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">8</span>,<span class="at" style="color: #657422;">hjust =</span> .<span class="dv" style="color: #AD0000;">1</span>),</span>
<span id="cb28-23">    <span class="at" style="color: #657422;">text =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">"Segoe UI"</span>),</span>
<span id="cb28-24">    <span class="at" style="color: #657422;">plot.title =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">"Segoe UI"</span>,<span class="at" style="color: #657422;">face =</span> <span class="st" style="color: #20794D;">"bold"</span>,<span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">30</span>,<span class="at" style="color: #657422;">hjust =</span> .<span class="dv" style="color: #AD0000;">5</span>))</span>
<span id="cb28-25">  )</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: attributes are not identical across measure variables; they will be
dropped</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://quartodomarcel.netlify.app/posts/30-days-charts-challenge-day01/index_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="fu" style="color: #4758AB;">ggdraw</span>(plot_final) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb30-2">  <span class="fu" style="color: #4758AB;">draw_label</span>(<span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"@marceelrf"</span>,<span class="at" style="color: #657422;">x =</span> .<span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">y =</span> <span class="fl" style="color: #AD0000;">0.025</span>,<span class="at" style="color: #657422;">fontfamily =</span> <span class="st" style="color: #20794D;">"Segoe UI"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb30-3">  <span class="fu" style="color: #4758AB;">draw_image</span>(<span class="at" style="color: #657422;">image =</span> <span class="st" style="color: #20794D;">"Marvel_Logo.svg"</span>,<span class="at" style="color: #657422;">x =</span> .<span class="dv" style="color: #AD0000;">85</span>,<span class="at" style="color: #657422;">y =</span> <span class="fl" style="color: #AD0000;">0.00001</span>,</span>
<span id="cb30-4">             <span class="at" style="color: #657422;">width =</span> <span class="fl" style="color: #AD0000;">0.13</span>, <span class="at" style="color: #657422;">height =</span> <span class="fl" style="color: #AD0000;">0.2</span>,<span class="at" style="color: #657422;">vjust =</span> .<span class="dv" style="color: #AD0000;">25</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): métrica da
fonte desconhecida para caractere 0x4d</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): fonte com
largura desconhecida para caractere 0x67</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): fonte com
largura desconhecida para caractere 0x6a</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): fonte com
largura desconhecida para caractere 0x70</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): fonte com
largura desconhecida para caractere 0x71</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): fonte com
largura desconhecida para caractere 0x79</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): fonte com
largura desconhecida para caractere 0x51</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://quartodomarcel.netlify.app/posts/30-days-charts-challenge-day01/index_files/figure-html/unnamed-chunk-10-2.png" class="img-fluid" width="672"></p>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="fu" style="color: #4758AB;">ggsave</span>(<span class="at" style="color: #657422;">filename =</span> <span class="st" style="color: #20794D;">"day01_finalplot.png"</span>,<span class="at" style="color: #657422;">width =</span> <span class="dv" style="color: #AD0000;">10</span>,<span class="at" style="color: #657422;">height =</span> <span class="dv" style="color: #AD0000;">7</span>,<span class="at" style="color: #657422;">dpi =</span> <span class="dv" style="color: #AD0000;">600</span>)</span></code></pre></div>
</div>


</section>

 ]]></description>
  <category>R</category>
  <category>Dataviz</category>
  <guid>https://quartodomarcel.netlify.app/posts/30-days-charts-challenge-day01/index.html</guid>
  <pubDate>Sat, 01 Apr 2023 03:00:00 GMT</pubDate>
  <media:content url="https://quartodomarcel.netlify.app/posts/30-days-charts-challenge-day01/Marvel_Logo.png" medium="image" type="image/png" height="58" width="144"/>
</item>
<item>
  <title>Operations with vectors</title>
  <dc:creator>Marcel Ferreira</dc:creator>
  <link>https://quartodomarcel.netlify.app/posts/Operations-with-vector/index.html</link>
  <description><![CDATA[ 




<script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-9124147692602552" crossorigin="anonymous"></script>
<p>In <a href="https://quartodomarcel.netlify.app/posts/r-objects/">previous posts</a> we have talked about object types and their <code>atomic</code> classes, among them <code>vectors</code>, which are the basis for the other objects. In this post I will begin to demonstrate how the main operations with <code>vectors</code> work, today focusing on numerical operations.</p>
<section id="numeric-vectors" class="level2">
<h2 class="anchored" data-anchor-id="numeric-vectors">Numeric vectors</h2>
<p>As said before, <code>vectors</code> are one-dimensional objects composed of a set of elements, where the order does not necessarily have a meaning, serving only to locate the element in the <code>vector</code>. Let’s look at the example of <code>vector</code> <code>v1</code> below:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Av_1%20=%20%5C%7B1,2,3,4,5%5C%7D%0A"></p>
<p><code>v1</code> represents the sequence of <code>integers</code> from 1 to 5. In R we can create any <code>vector</code> with the <code>c()</code> function, as we saw earlier. But it is not the only way. We can create sequences with the <code>:</code> operator, for <code>integers</code>, and the <code>seq()</code> function for general cases. So let’s create <code>v1</code> as an object in R in these three different ways. But first a hint, when creating an object in R we can do it inside <code>()</code> and the generated object will be printed <strong><em>automatically</em></strong>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;">#created with c()</span></span>
<span id="cb1-2">(v1_1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">4</span>,<span class="dv" style="color: #AD0000;">5</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 2 3 4 5</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;">#created with :</span></span>
<span id="cb3-2">(v1_2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 2 3 4 5</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;">#created with seq()</span></span>
<span id="cb5-2">(v1_3 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="at" style="color: #657422;">from =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">to =</span> <span class="dv" style="color: #AD0000;">5</span>, <span class="at" style="color: #657422;">by =</span> <span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 2 3 4 5</code></pre>
</div>
</div>
<p>When we choose a fractional value in the argument <code>by</code>, the <code>seq()</code> function can generate any number sequence (Arithmetic Progressions).</p>
</section>
<section id="math-using-vectors" class="level2">
<h2 class="anchored" data-anchor-id="math-using-vectors">Math using vectors</h2>
<p>The basic mathematical operations in R, addition, subtraction, multiplication, division, etc, are contained in the table below:</p>
<table class="table">
<caption>Math operations</caption>
<colgroup>
<col style="width: 18%">
<col style="width: 33%">
<col style="width: 18%">
<col style="width: 27%">
</colgroup>
<thead>
<tr class="header">
<th>Math</th>
<th>Operator</th>
<th>Code</th>
<th>Example</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>addtion</td>
<td><code>+</code></td>
<td><code>2+2</code></td>
<td><img src="https://latex.codecogs.com/png.latex?2+2%20=4"></td>
</tr>
<tr class="even">
<td>subtraction</td>
<td><code>-</code></td>
<td><code>4-2</code></td>
<td><img src="https://latex.codecogs.com/png.latex?4-2=2"></td>
</tr>
<tr class="odd">
<td>multiplication</td>
<td><code>*</code></td>
<td><code>2*2</code></td>
<td><img src="https://latex.codecogs.com/png.latex?2%5Ctimes2=4"></td>
</tr>
<tr class="even">
<td>division</td>
<td><code>/</code></td>
<td><code>4/2</code></td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B4%7D%7B2%7D%20=%202"></td>
</tr>
<tr class="odd">
<td>power</td>
<td><code>^</code> or <code>**</code></td>
<td><code>2^2</code></td>
<td><img src="https://latex.codecogs.com/png.latex?2%5E2=4"></td>
</tr>
<tr class="even">
<td>square root</td>
<td><code>sqrt()</code></td>
<td><code>sqrt(4)</code></td>
<td><img src="https://latex.codecogs.com/png.latex?%5Csqrt%7B4%7D%20=%202"></td>
</tr>
<tr class="odd">
<td>exponential</td>
<td><code>exp()</code></td>
<td><code>exp(-4)</code></td>
<td><img src="https://latex.codecogs.com/png.latex?e%5E%7B-4%7D%20=%200.0183"></td>
</tr>
<tr class="even">
<td>log</td>
<td><p><code>log()</code>, <code>log2</code> or <code>log10</code></p></td>
<td><code>log(0.0183)</code></td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cln(0.0183)%20%5Csimeq%20-4"></td>
</tr>
</tbody>
</table>
<p>There are others, but I believe that these will be the most used in our day to day. These operations in R work element by element. For example, when we add two <code>vectors</code> (<img src="https://latex.codecogs.com/png.latex?v_1=%5C%7B1,2,3,4,5%5C%7D%20v_2%20=%20%5C%7B2,3,4,5,6%5C%7D">), R will add element 1 of <code>v1</code> to 1 of <code>v2</code>, 2 of <code>v1</code> to 2 of <code>v2</code>, and so on.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Av_1+v_2=%5C%7B1+2,2+3,3+4,4+5,5+6%5C%7D%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0Av_1+v_2=%5C%7B3,5,7,9,11%5C%7D%0A"></p>
<p>Subtraction, multiplication, division, and potentiation follow the same principle.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">v1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb7-2">v2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">6</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;">#add</span></span>
<span id="cb7-4">v1<span class="sc" style="color: #5E5E5E;">+</span>v2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  3  5  7  9 11</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;">#sub</span></span>
<span id="cb9-2">v1<span class="sc" style="color: #5E5E5E;">-</span>v2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] -1 -1 -1 -1 -1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;">#multiplication</span></span>
<span id="cb11-2">v1<span class="sc" style="color: #5E5E5E;">*</span>v2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  2  6 12 20 30</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;">#division</span></span>
<span id="cb13-2">v1<span class="sc" style="color: #5E5E5E;">/</span>v2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.5000000 0.6666667 0.7500000 0.8000000 0.8333333</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;">#power</span></span>
<span id="cb15-2">v1<span class="sc" style="color: #5E5E5E;">^</span>v2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]     1     8    81  1024 15625</code></pre>
</div>
</div>
<p>From this we can infer that it is necessary in R that <code>vectors</code> contain the same number of elements (or the same <code>length</code>), but in practice this is not what happens. In case of <code>vectors</code> of different <code>lengths</code> R will <code>recycle</code> the <code>vector</code> with the smallest number of elements to match and thus perform the math. Consider the <code>vectors</code> <img src="https://latex.codecogs.com/png.latex?v_1%20=%20%5C%7B1,2,3,4,5%5C%7D"> and <img src="https://latex.codecogs.com/png.latex?v_3%20=%20%5C%7B0,2,1%5C%7D">, Let’s see how R performs subtraction.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Av_1-v_3%20=%20%5C%7B1-0,2-2,3-1,4-0,5-2%5C%7D%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0Av_1-v_3%20=%20%5C%7B1,0,2,4,3%5C%7D%0A"></p>
<p>Again, the operations addition, multiplication, division and power work equally in R.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">v1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb17-2">v3 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;">#add</span></span>
<span id="cb17-4">v1<span class="sc" style="color: #5E5E5E;">+</span>v3</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in v1 + v3: comprimento do objeto maior não é múltiplo do comprimento do
objeto menor</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 4 4 4 7</code></pre>
</div>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;">#sub</span></span>
<span id="cb20-2">v1<span class="sc" style="color: #5E5E5E;">-</span>v3</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in v1 - v3: comprimento do objeto maior não é múltiplo do comprimento do
objeto menor</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 0 2 4 3</code></pre>
</div>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="co" style="color: #5E5E5E;">#multiplication</span></span>
<span id="cb23-2">v1<span class="sc" style="color: #5E5E5E;">*</span>v3</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in v1 * v3: comprimento do objeto maior não é múltiplo do comprimento do
objeto menor</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  0  4  3  0 10</code></pre>
</div>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="co" style="color: #5E5E5E;">#division</span></span>
<span id="cb26-2">v1<span class="sc" style="color: #5E5E5E;">/</span>v3</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in v1/v3: comprimento do objeto maior não é múltiplo do comprimento do
objeto menor</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] Inf 1.0 3.0 Inf 2.5</code></pre>
</div>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="co" style="color: #5E5E5E;">#power</span></span>
<span id="cb29-2">v1<span class="sc" style="color: #5E5E5E;">^</span>v3</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in v1^v3: comprimento do objeto maior não é múltiplo do comprimento do
objeto menor</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  1  4  3  1 25</code></pre>
</div>
</div>
<p>Notice that a <code>warning</code> is displayed that the <code>vectors</code> have different sizes and that when we divide by <code>0</code> an <code>Inf</code> value relative to infinity is displayed. R’s recycling behavior may seem strange at first, but it is useful for performing <code>scalar</code> operations with <code>vectors</code> (remembering that in practice in R there are no scalars, only unit <code>vectors</code>).</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A5+v_1%20=%20%5C%7B5+1,5+2,5+3,5+4,5+5%5C%7D%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A5+v1%20=%20%5C%7B6,7,8,9,10%5C%7D%0A"></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">v1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb32-2"><span class="co" style="color: #5E5E5E;">#add</span></span>
<span id="cb32-3">v1<span class="sc" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">5</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  6  7  8  9 10</code></pre>
</div>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="co" style="color: #5E5E5E;">#sub</span></span>
<span id="cb34-2">v1<span class="dv" style="color: #AD0000;">-5</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] -4 -3 -2 -1  0</code></pre>
</div>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="co" style="color: #5E5E5E;">#multiplication</span></span>
<span id="cb36-2">v1<span class="sc" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">5</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  5 10 15 20 25</code></pre>
</div>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="co" style="color: #5E5E5E;">#division</span></span>
<span id="cb38-2">v1<span class="sc" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">5</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.2 0.4 0.6 0.8 1.0</code></pre>
</div>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="co" style="color: #5E5E5E;">#power</span></span>
<span id="cb40-2">v1<span class="sc" style="color: #5E5E5E;">^</span><span class="dv" style="color: #AD0000;">5</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]    1   32  243 1024 3125</code></pre>
</div>
</div>
<p>Similarly, <code>functions</code> are also applied element by element. Let’s look at the same v1 being calculated its square root, exponential and logarithm.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1">v1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb42-2"><span class="co" style="color: #5E5E5E;">#square root</span></span>
<span id="cb42-3"><span class="fu" style="color: #4758AB;">sqrt</span>(v1)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1.000000 1.414214 1.732051 2.000000 2.236068</code></pre>
</div>
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1"><span class="co" style="color: #5E5E5E;">#exponential</span></span>
<span id="cb44-2"><span class="fu" style="color: #4758AB;">exp</span>(v1)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]   2.718282   7.389056  20.085537  54.598150 148.413159</code></pre>
</div>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1"><span class="co" style="color: #5E5E5E;">#log</span></span>
<span id="cb46-2"><span class="fu" style="color: #4758AB;">log</span>(v1)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.0000000 0.6931472 1.0986123 1.3862944 1.6094379</code></pre>
</div>
</div>
<p>R also contains periodic functions like sine (<code>sin()</code>), cosine (<code>cos()</code>) and tangent (<code>tan()</code>), and an inner object to represent <code>pi</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">pi</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3.141593</code></pre>
</div>
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1"><span class="co" style="color: #5E5E5E;">#sine</span></span>
<span id="cb50-2"><span class="fu" style="color: #4758AB;">sin</span>(pi)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1.224606e-16</code></pre>
</div>
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1"><span class="co" style="color: #5E5E5E;">#cossine</span></span>
<span id="cb52-2"><span class="fu" style="color: #4758AB;">cos</span>(pi)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] -1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1"><span class="co" style="color: #5E5E5E;">#tangent</span></span>
<span id="cb54-2"><span class="fu" style="color: #4758AB;">tan</span>(pi)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] -1.224647e-16</code></pre>
</div>
</div>
<p>It is important to see that the values calculated by R, although they are infinitesimal, are not exactly the known values.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Csin(%5Cpi)%20=%200%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ccos(%5Cpi)%20=%20-1%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctan(%5Cpi)%20=%200%0A"></p>
</section>
<section id="concluding" class="level2">
<h2 class="anchored" data-anchor-id="concluding">Concluding</h2>
<p>Well, there are many more functions and operators that can be applied, but I think we have covered the main ones. We saw how <code>recycling</code> works in operations. That’s it for now. I hope to see you in the next posts!</p>
<p>See you there!</p>


</section>

 ]]></description>
  <category>R</category>
  <category>base</category>
  <guid>https://quartodomarcel.netlify.app/posts/Operations-with-vector/index.html</guid>
  <pubDate>Mon, 05 Sep 2022 03:00:00 GMT</pubDate>
  <media:content url="https://quartodomarcel.netlify.app/posts/Operations-with-vector/blackboard-gf94387624_1280.png" medium="image" type="image/png" height="103" width="144"/>
</item>
<item>
  <title>R objects 3</title>
  <dc:creator>Marcel Ferreira</dc:creator>
  <link>https://quartodomarcel.netlify.app/posts/R-objects-3/index.html</link>
  <description><![CDATA[ 




<script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-9124147692602552" crossorigin="anonymous"></script>
<p>It is popularly known the curse of the third movie. Alien 3, Return of the Jedi, X-men: The Last Stand, Spider-Man 3, The Godfather 3, among others (MANY OTHERS) have suffered from this curse. However, MARVEL has overcome this curse recently with films like Infinity War, Thor Ragnarok, and Spider-Man with No Way Home. Inspired by her, we will conclude our trilogy of basic R objects. In this post we will look at <code>Lists</code>.</p>
<section id="lists" class="level2">
<h2 class="anchored" data-anchor-id="lists">Lists</h2>
<p><code>Lists</code> are objects similar to <code>vectors</code>, but each element can be a different object. That is, a list can contain a <code>vector</code> in one element, a <code>matrix</code> or <code>data.frame</code> in another, and even a <code>list</code> in a given element. That’s right, <code>lists</code> within <code>lists</code>.</p>
<center>
<iframe src="https://giphy.com/embed/13S1lWb5qheNBC" width="480" height="201" frameborder="0" class="giphy-embed" allowfullscreen="">
</iframe>
<p>
<a href="https://giphy.com/gifs/loop-dreaming-13S1lWb5qheNBC">via GIPHY</a>
</p>

</center>
<p>The function <code>list()</code> is used to create a list in R:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">v1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">7</span>)</span>
<span id="cb1-2">v2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"a"</span>,<span class="st" style="color: #20794D;">"b"</span>)</span>
<span id="cb1-3">df1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">var1 =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">4</span>),</span>
<span id="cb1-4">                  <span class="at" style="color: #657422;">var2 =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"a"</span>,<span class="st" style="color: #20794D;">"b"</span>,<span class="st" style="color: #20794D;">"c"</span>,<span class="st" style="color: #20794D;">"d"</span>),</span>
<span id="cb1-5">                  <span class="at" style="color: #657422;">var3 =</span> <span class="fu" style="color: #4758AB;">c</span>(T,T,T,F))</span>
<span id="cb1-6"></span>
<span id="cb1-7">l1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(v1,v2,df1)</span>
<span id="cb1-8">l1</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] 1 3 5 7

[[2]]
[1] "a" "b"

[[3]]
  var1 var2  var3
1    1    a  TRUE
2    2    b  TRUE
3    3    c  TRUE
4    4    d FALSE</code></pre>
</div>
</div>
<p>We can see that the output of a <code>list</code> contains differences from the others that we have seen. Each element number on a <code>list</code> is printed by R with double square brackets. Then R will print the elements as we have seen for each class.</p>
<p>This is something important to note when talking about how we extract elements from <code>lists</code>. If we use the single bracket operator the output will be a <code>list</code>, but only containing the element of that index.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;">#Single square bracket</span></span>
<span id="cb3-2">l1[<span class="dv" style="color: #AD0000;">2</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] "a" "b"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;">#Double square bracket</span></span>
<span id="cb5-2">l1[[<span class="dv" style="color: #AD0000;">2</span>]]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "a" "b"</code></pre>
</div>
</div>
<p>We can use the <code>class()</code> function to check the output classes.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;">#Single square bracket</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;">class</span>(l1[<span class="dv" style="color: #AD0000;">2</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "list"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;">#Double square bracket</span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;">class</span>(l1[[<span class="dv" style="color: #AD0000;">2</span>]])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "character"</code></pre>
</div>
</div>
<p>When working with <code>lists</code> we can access elements internal to a given <code>list</code> element. To do this we use a double square bracket followed by a single square bracket. Example, let’s extract the third element contained in the first element of the <code>list</code> <code>l1</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># The third element in the first list element</span></span>
<span id="cb11-2">l1[[<span class="dv" style="color: #AD0000;">1</span>]][<span class="dv" style="color: #AD0000;">3</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 5</code></pre>
</div>
</div>
<p>The third element of <code>l1</code> is a <code>data.frame</code>, we can extract its columns or rows in a similar way.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;">#The first column of the data.frame in the third list element</span></span>
<span id="cb13-2">l1[[<span class="dv" style="color: #AD0000;">3</span>]][,<span class="dv" style="color: #AD0000;">1</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 2 3 4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;">#The rows number 2 and 3 in the data.frame in the third list element</span></span>
<span id="cb15-2">l1[[<span class="dv" style="color: #AD0000;">3</span>]][<span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">3</span>,]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  var1 var2 var3
2    2    b TRUE
3    3    c TRUE</code></pre>
</div>
</div>
<p>Just as we can name columns and rows in <code>data.frames</code>/<code>matrix</code>, we can name each element in a <code>list</code>. This is done using the <code>names()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;">#unamed list</span></span>
<span id="cb17-2"><span class="fu" style="color: #4758AB;">names</span>(l1)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>NULL</code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;">names</span>(l1) <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"element1"</span>,<span class="st" style="color: #20794D;">"element2"</span>,<span class="st" style="color: #20794D;">"element3"</span>)</span>
<span id="cb19-2"></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;">#named list</span></span>
<span id="cb19-4"><span class="fu" style="color: #4758AB;">names</span>(l1)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "element1" "element2" "element3"</code></pre>
</div>
</div>
<p>And, as you may be wondering, we can use these names to extract elements from the <code>list</code> by passing them in the single or double square bracket operators.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">l1</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$element1
[1] 1 3 5 7

$element2
[1] "a" "b"

$element3
  var1 var2  var3
1    1    a  TRUE
2    2    b  TRUE
3    3    c  TRUE
4    4    d FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="co" style="color: #5E5E5E;">#Single square bracket</span></span>
<span id="cb23-2">l1[<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"element1"</span>,<span class="st" style="color: #20794D;">"element3"</span>)]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$element1
[1] 1 3 5 7

$element3
  var1 var2  var3
1    1    a  TRUE
2    2    b  TRUE
3    3    c  TRUE
4    4    d FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="co" style="color: #5E5E5E;">#Double square bracket</span></span>
<span id="cb25-2">l1[[<span class="st" style="color: #20794D;">"element1"</span>]]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 3 5 7</code></pre>
</div>
</div>
</section>
<section id="concluding" class="level2">
<h2 class="anchored" data-anchor-id="concluding">Concluding</h2>
<p>In this three posts we have seen the main objects that form the basis of R. There are others, of course, but with these well understood we can solve the vast majority of challenges when working with R.</p>
<p>I will soon create content showing operations with these objects in practice. That’s it for now. See you around!</p>


</section>

 ]]></description>
  <category>R</category>
  <category>base</category>
  <guid>https://quartodomarcel.netlify.app/posts/R-objects-3/index.html</guid>
  <pubDate>Sun, 28 Aug 2022 03:00:00 GMT</pubDate>
  <media:content url="https://quartodomarcel.netlify.app/posts/R-objects-3/checklist-gf5b297ead_1920.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>R objects 2</title>
  <dc:creator>Marcel Ferreira</dc:creator>
  <link>https://quartodomarcel.netlify.app/posts/R-objects-2/index.html</link>
  <description><![CDATA[ 




<script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-9124147692602552" crossorigin="anonymous"></script>
<p>In the last post (<a href="https://quartodomarcel.netlify.app/posts/r-objects/"><strong>R objects</strong></a>) we have seen the <code>atomic</code> classes and <code>vectors</code>, which are one-dimensional arrangements of these classes. But, as you can imagine, it’s not always possible to represent our data using one-dimensional object. When talking about two-dimensional objects tables are something extremely common in our daily lives. R has two types of objects for representing tables (2D objects): <code>matrix</code> and <code>data.frames</code>, very similar objects, but with one <strong>very important difference</strong>: <code>matrix</code> only accept <strong>ONE</strong> <code>atomic</code> class, while <code>data.frames</code> accept <strong>ONE</strong> per column.</p>
<section id="matrix" class="level2">
<h2 class="anchored" data-anchor-id="matrix">Matrix</h2>
<p>To create a <code>matrix</code> we need a <code>vector</code> (Yes, a <code>vector</code>) and the function <code>matrix()</code>. This function takes the <code>vector</code> and arrange in a object containing the number of rows and columns that we specify in the arguments <code>nrow</code> and <code>ncol</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">v1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb1-2"></span>
<span id="cb1-3">Mat1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">matrix</span>(<span class="at" style="color: #657422;">data =</span> v1,</span>
<span id="cb1-4">               <span class="at" style="color: #657422;">nrow =</span> <span class="dv" style="color: #AD0000;">2</span>,</span>
<span id="cb1-5">               <span class="at" style="color: #657422;">ncol =</span> <span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb1-6">Mat1</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]    1    3    2
[2,]    2    1    3</code></pre>
</div>
</div>
<p>It’s possible to control the order of the elements in the <code>matrix</code> using the argument <code>byrow</code>, which controls whether the elements will be filled by rows or columns (<strong><em>default</em></strong>).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">matrix</span>(<span class="at" style="color: #657422;">data =</span> v1,</span>
<span id="cb3-2">       <span class="at" style="color: #657422;">nrow =</span> <span class="dv" style="color: #AD0000;">2</span>,</span>
<span id="cb3-3">       <span class="at" style="color: #657422;">ncol =</span> <span class="dv" style="color: #AD0000;">3</span>,</span>
<span id="cb3-4">       <span class="at" style="color: #657422;">byrow =</span> T)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]    1    2    3
[2,]    1    2    3</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">matrix</span>(<span class="at" style="color: #657422;">data =</span> v1,</span>
<span id="cb5-2">       <span class="at" style="color: #657422;">nrow =</span> <span class="dv" style="color: #AD0000;">2</span>,</span>
<span id="cb5-3">       <span class="at" style="color: #657422;">ncol =</span> <span class="dv" style="color: #AD0000;">3</span>,</span>
<span id="cb5-4">       <span class="at" style="color: #657422;">byrow =</span> F)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]    1    3    2
[2,]    2    1    3</code></pre>
</div>
</div>
<p>The last argument, <code>dimnames</code>, allows us to choose names for the dimensions (rows and columns), but for this argument we need to use <code>lists</code>, and since we haven’t talked about this object class yet, I will show you how to achieve the same results using functions. The functions <code>rownames()</code> and <code>colnames()</code> are used to extract the row and column names, respectively. We can use an <code>vector</code> of <code>characters</code>, equal in length to the number of rows or columns, to choose their names.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;">#Columns</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;">colnames</span>(Mat1)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>NULL</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;">colnames</span>(Mat1) <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Col1"</span>,<span class="st" style="color: #20794D;">"Col2"</span>,<span class="st" style="color: #20794D;">"Col3"</span>)</span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;">colnames</span>(Mat1)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Col1" "Col2" "Col3"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;">#Rows</span></span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;">rownames</span>(Mat1)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>NULL</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;">rownames</span>(Mat1) <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Row1"</span>,<span class="st" style="color: #20794D;">"Row2"</span>)</span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;">rownames</span>(Mat1)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Row1" "Row2"</code></pre>
</div>
</div>
<p>Similar to <code>vectors</code>, we can extract the elements using squarebrackets, but now we have to pass the indices to rows and columns.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;">#Extract the 2nd row</span></span>
<span id="cb15-2">Mat1[<span class="dv" style="color: #AD0000;">2</span>,]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Col1 Col2 Col3 
   2    1    3 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;">#Extract the 1st and 3rd columns</span></span>
<span id="cb17-2">Mat1[,<span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">3</span>)]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     Col1 Col3
Row1    1    2
Row2    2    3</code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="co" style="color: #5E5E5E;">#Extract the element row = 2 column = 2</span></span>
<span id="cb19-2">Mat1[<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">2</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1</code></pre>
</div>
</div>
</section>
<section id="data-frames" class="level2">
<h2 class="anchored" data-anchor-id="data-frames">Data frames</h2>
<p><code>Data frames</code> are objects design to store data tables in R. Similar to <code>matrix</code>, <code>data frames</code> are 2D objects but as said before, different columns can have different classes. In practice we can think of each column as being a different <code>vector</code>, and the <code>$</code> operator allows us to extract this <code>vector</code>. Thinking about data analysis, in a <code>data frame</code> each column is a variable and each row is an observation.</p>
<p>We build <code>data.frames</code> with the function <code>data.frame</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">df1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">var1 =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">4</span>),</span>
<span id="cb21-2">                  <span class="at" style="color: #657422;">var2 =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"a"</span>,<span class="st" style="color: #20794D;">"b"</span>,<span class="st" style="color: #20794D;">"c"</span>,<span class="st" style="color: #20794D;">"d"</span>),</span>
<span id="cb21-3">                  <span class="at" style="color: #657422;">var3 =</span> <span class="fu" style="color: #4758AB;">c</span>(T,T,T,F))</span>
<span id="cb21-4">df1</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  var1 var2  var3
1    1    a  TRUE
2    2    b  TRUE
3    3    c  TRUE
4    4    d FALSE</code></pre>
</div>
</div>
<p>Extracting vectors</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">df1<span class="sc" style="color: #5E5E5E;">$</span>var1</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 2 3 4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">df1<span class="sc" style="color: #5E5E5E;">$</span>var2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "a" "b" "c" "d"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">df1<span class="sc" style="color: #5E5E5E;">$</span>var3</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  TRUE  TRUE  TRUE FALSE</code></pre>
</div>
</div>
<p>As for <code>matrix</code>, we can use squartebrackets to extract elements (although I recommend extracting using the <code>$</code> operator first).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="co" style="color: #5E5E5E;">#Using squarebrackets</span></span>
<span id="cb29-2">df1[<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">2</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "b"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="co" style="color: #5E5E5E;">#Using the $</span></span>
<span id="cb31-2">df1<span class="sc" style="color: #5E5E5E;">$</span>var2[<span class="dv" style="color: #AD0000;">2</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "b"</code></pre>
</div>
</div>
<p>The names of columns (or variable) can be used in the squarebracket to extract the column.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">df1[,<span class="st" style="color: #20794D;">"var1"</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 2 3 4</code></pre>
</div>
</div>
<p>For <code>matrix</code> and for <code>data.frames</code> we can find the sizes of the dimensions with the functions <code>nrow()</code>, <code>ncol()</code>, and <code>dim()</code>, which return the number of rows, columns, and both, respectively.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="co" style="color: #5E5E5E;">#number of rows</span></span>
<span id="cb35-2"><span class="fu" style="color: #4758AB;">nrow</span>(df1)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="co" style="color: #5E5E5E;">#number of columns</span></span>
<span id="cb37-2"><span class="fu" style="color: #4758AB;">ncol</span>(df1)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3</code></pre>
</div>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1"><span class="co" style="color: #5E5E5E;">#length of dimensions</span></span>
<span id="cb39-2"><span class="fu" style="color: #4758AB;">dim</span>(df1)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 4 3</code></pre>
</div>
</div>
<p>So far, so good. In the next post I will deal with that <code>list</code> I talked about here, and we will see how powerful they are.</p>
<p>I’ll be waiting for you!</p>


</section>

 ]]></description>
  <category>R</category>
  <category>base</category>
  <guid>https://quartodomarcel.netlify.app/posts/R-objects-2/index.html</guid>
  <pubDate>Wed, 24 Aug 2022 03:00:00 GMT</pubDate>
  <media:content url="https://quartodomarcel.netlify.app/posts/R-objects-2/matrix-2502954_1280.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>R objects</title>
  <dc:creator>Marcel Ferreira</dc:creator>
  <link>https://quartodomarcel.netlify.app/posts/R-objects/index.html</link>
  <description><![CDATA[ 




<script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-9124147692602552" crossorigin="anonymous"></script>
<p>R is an extremely powerful language for data analysis and is used in many different fields. But many users start without taking the time to assimilate the different types of objects, which leads to mistakes that could simply be avoided. This in turn can lead to frustration, which is the gateway to the dark side of the force.</p>
<center>
<iframe src="https://giphy.com/embed/l3diT8stVH9qImalO" width="480" height="270" frameborder="0" class="giphy-embed" allowfullscreen="">
</iframe>
</center>
<p>
<a href="https://giphy.com/gifs/starwars-star-wars-revenge-of-the-sith-l3diT8stVH9qImalO">via GIPHY</a>
</p>
<p>When I started analyzing data with R I was on a very tight deadline and had to skip these steps, and I made a lot of mistakes. Really, a lot!</p>
<p>So in this post I will talk about the basic object types, or classes, in R. Basic but effective. I hope it helps you.</p>
<section id="atomic-data" class="level2">
<h2 class="anchored" data-anchor-id="atomic-data">Atomic data</h2>
<p>These are the basic data classes in R. More complex objects will always be built using them. There are 6 classes in R: <code>logical</code>, <code>integer</code>, <code>real</code>, <code>complex</code>, string (or <code>character</code>) and <code>raw</code>. <code>logical</code> are values like <code>TRUE</code> or <code>FALSE</code> (Known as Booleans). <code>integer</code>, <code>real</code> and <code>complex</code> are <code>numeric</code> types. <code>character</code> are values like words, in other languages this type of values are call as <code>strings</code>. And about <code>raw</code> I must be honest with you. I have never used it!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;">#logical</span></span>
<span id="cb1-2"><span class="cn" style="color: #8f5902;">TRUE</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;">#integer</span></span>
<span id="cb3-2">1L</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;">#real</span></span>
<span id="cb5-2"><span class="fl" style="color: #AD0000;">1.2</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1.2</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;">#complex</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;">complex</span>(<span class="at" style="color: #657422;">real =</span> <span class="dv" style="color: #AD0000;">1</span>,<span class="at" style="color: #657422;">imaginary =</span> <span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1+2i</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;">#character</span></span>
<span id="cb9-2"><span class="st" style="color: #20794D;">"String"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "String"</code></pre>
</div>
</div>
<p>You may have notice that there is special ways to create these objects. We use <code>""</code> to define a <code>character</code>. We add <code>L</code> to the end of a number to make it explicit that it is an <code>integer</code>. We need the <code>complex()</code> function to create a <code>complex</code> number. And <code>logical</code>s are defined by the uppercase words <code>TRUE</code> and <code>FALSE</code>, and their respective initials, <code>T</code> and <code>F</code>.</p>
</section>
<section id="vectors" class="level2">
<h2 class="anchored" data-anchor-id="vectors">Vectors</h2>
<p>Vectors are one-dimensional objects composed of a set of elements, where the order does not necessarily have a meaning, serving only to locate the element in the vector. The functions <code>c()</code> is used to create vector in R.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">v1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb11-2">v1</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 3 5</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">v2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"ball"</span>,<span class="st" style="color: #20794D;">"house"</span>)</span>
<span id="cb13-2">v2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "ball"  "house"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">v3 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(T,T,F)</span>
<span id="cb15-2">v3</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  TRUE  TRUE FALSE</code></pre>
</div>
</div>
<p>The operator <code>[]</code> can be used to extract the element of certain position in a vector. For example, let’s extract the second element of the vectors <code>v1</code>, <code>v2</code> and <code>v3</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">v1[<span class="dv" style="color: #AD0000;">2</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3</code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">v2[<span class="dv" style="color: #AD0000;">2</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "house"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">v3[<span class="dv" style="color: #AD0000;">2</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>Pay attention when use this operator to not try access an non existing position in a vector. such as trying to access the fourth element in a vector (<code>v1</code>) with only three elements. This will result in a <code>NA</code> value, which is represent the <strong>missing values</strong> in R, which are a very important topic that I will cover in the future. Stay tuned!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">v1[<span class="dv" style="color: #AD0000;">4</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] NA</code></pre>
</div>
</div>
<p>There are other ways to create vectors in R considering their classes that I will dedicate a separate post for this.</p>
<p>In R different classes cannot coexist in the same vector (we will see what a vector is later, for now just trust me) and there is coercion when we put them together. Coercion occurs in the following order:</p>
<p><code>character &gt; complex &gt; real &gt; integer &gt; logical</code></p>
<p>This means, if you put a <code>character</code> and a <code>numeric</code> together in a <code>vector</code>, R will coerce the <code>numeric</code> to become a <code>character</code>. If you put a <code>logical</code> in the same <code>vector</code> as a <code>numeric</code> it will be turned into a <code>numeric</code>. The functions <code>class()</code> and <code>typeof()</code> can be used to check the class and type, respectively, of R objects.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="co" style="color: #5E5E5E;">#class and typeof usage</span></span>
<span id="cb25-2"><span class="fu" style="color: #4758AB;">class</span>(<span class="st" style="color: #20794D;">"ball"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "character"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;">typeof</span>(1L)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "integer"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;">class</span>(<span class="fl" style="color: #AD0000;">1.2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "numeric"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="co" style="color: #5E5E5E;">#coercion</span></span>
<span id="cb31-2">obj1 <span class="ot" style="color: #003B4F;">&lt;-</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"ball"</span>,<span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb31-3"><span class="fu" style="color: #4758AB;">class</span>(obj1)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "character"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="fu" style="color: #4758AB;">typeof</span>(obj1)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "character"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">obj2 <span class="ot" style="color: #003B4F;">&lt;-</span><span class="fu" style="color: #4758AB;">c</span>(<span class="cn" style="color: #8f5902;">TRUE</span>,<span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb35-2"><span class="fu" style="color: #4758AB;">class</span>(obj2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "numeric"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="fu" style="color: #4758AB;">typeof</span>(obj2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "double"</code></pre>
</div>
</div>
<p>This behavior is the source of major errors and it is always necessary to check that your objects are of the desired class. After all, it is impossible to perform mathematical operations with <code>character</code> in R, for example.</p>
<p>However, the coercion behavior can be used to our advantage in the case of the trick of using <code>logical</code>s and <code>numeric</code> together. Like in the case where we want to know how many numbers in an vector are greater than a certain value. By using the <code>&gt;</code> (greater than) operator we perform a logical test that returns <code>TRUE</code>/<code>FALSE</code> values. The <code>sum()</code> function, on the other hand, adds up all the elements of a <code>vector</code> and if it receives a <code>logical</code> <code>vector</code> it will transform <code>TRUE</code> into <code>1</code> and <code>FALSE</code> into <code>0</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1"><span class="co" style="color: #5E5E5E;">#a numeric vector</span></span>
<span id="cb39-2">v1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">4</span>,<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">8</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb39-3"></span>
<span id="cb39-4"></span>
<span id="cb39-5"><span class="co" style="color: #5E5E5E;">#logical test</span></span>
<span id="cb39-6">v1 <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">3</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="co" style="color: #5E5E5E;">#use sum to get how many numbers are grater than 3</span></span>
<span id="cb41-2"><span class="fu" style="color: #4758AB;">sum</span>(v1 <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3</code></pre>
</div>
</div>
<p>The post is getting long, so that’s it for now! In the next one we will talk about objects with larger dimensions like <code>matrix</code> and <code>data.frame</code>.</p>
<p>I’m waiting for you!</p>


</section>

 ]]></description>
  <category>R</category>
  <category>base</category>
  <guid>https://quartodomarcel.netlify.app/posts/R-objects/index.html</guid>
  <pubDate>Fri, 12 Aug 2022 03:00:00 GMT</pubDate>
  <media:content url="https://quartodomarcel.netlify.app/posts/R-objects/cubes-g23e20f481_1920.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>My first R package</title>
  <dc:creator>Marcel Ferreira</dc:creator>
  <link>https://quartodomarcel.netlify.app/posts/post-with-code/index.html</link>
  <description><![CDATA[ 




<p>Hello everybody, I’m really excited to announce that I have finished (or almost) my first R package. The <code>tidyspec</code>: a package to analyze spectroscopy data using tidy-data philosophy.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://quartodomarcel.netlify.app/posts/post-with-code/tidyspec_prov.png" class="img-fluid figure-img" width="400"></p>
<p></p><figcaption class="figure-caption">preliminar hex</figcaption><p></p>
</figure>
</div>
<p>In the next few weeks I will be writing the function documentation and then finalizing the package. I am very happy because when I started using R to analyze my FTIR (infrared spectroscopy) data I could not apply <code>tidyverse</code> functions to my pipelines. It took me months of wracking my brains to find a model to leverage the existing packages and connect them to the <code>tidyverse</code>.</p>
<p>You can check the <a href="https://github.com/marceelrf/tidyspec">github repository</a>.</p>
<p>Enjoy!</p>



 ]]></description>
  <category>news</category>
  <category>R</category>
  <category>FTIR</category>
  <category>biomaterials</category>
  <guid>https://quartodomarcel.netlify.app/posts/post-with-code/index.html</guid>
  <pubDate>Thu, 11 Aug 2022 03:00:00 GMT</pubDate>
  <media:content url="https://quartodomarcel.netlify.app/posts/post-with-code/tidyspec_prov.png" medium="image" type="image/png" height="165" width="144"/>
</item>
<item>
  <title>Welcome To My Blog</title>
  <dc:creator>Marcel Ferreira</dc:creator>
  <link>https://quartodomarcel.netlify.app/posts/welcome/index.html</link>
  <description><![CDATA[ 




<p>This is the first post in a Quarto blog. Welcome!</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://quartodomarcel.netlify.app/posts/welcome/images/dreamMarcel.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Mee</figcaption><p></p>
</figure>
</div>



 ]]></description>
  <category>news</category>
  <guid>https://quartodomarcel.netlify.app/posts/welcome/index.html</guid>
  <pubDate>Wed, 10 Aug 2022 03:00:00 GMT</pubDate>
  <media:content url="https://quartodomarcel.netlify.app/posts/welcome/images/dreamMarcel.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
