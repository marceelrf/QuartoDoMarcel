---
title: "R objects"
description: ""
author: "Marcel Ferreira"
date: "2022-08-12"
categories: [R, base]
image: "cubes-g23e20f481_1920.jpg"
---

```{=html}
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-9124147692602552"
     crossorigin="anonymous"></script>
```
R is an extremely powerful language for data analysis and is used in many different fields. But many users start without taking the time to assimilate the different types of objects, which leads to mistakes that could simply be avoided. This in turn can lead to frustration, which is the gateway to the dark side of the force.

<center>

<iframe src="https://giphy.com/embed/l3diT8stVH9qImalO" width="480" height="270" frameBorder="0" class="giphy-embed" allowFullScreen>

</iframe>

</center>

<p><a href="https://giphy.com/gifs/starwars-star-wars-revenge-of-the-sith-l3diT8stVH9qImalO">via GIPHY</a></p>

When I started analyzing data with R I was on a very tight deadline and had to skip these steps, and I made a lot of mistakes. Really, a lot!

So in this post I will talk about the basic object types, or classes, in R. Basic but effective. I hope it helps you.

## Atomic data

These are the basic data classes in R. More complex objects will always be built using them. There are 6 classes in R: `logical`, `integer`, `real`, `complex`, string (or `character`) and `raw`. `logical` are values like `TRUE` or `FALSE` (Known as Booleans). `integer`, `real` and `complex` are `numeric` types. `character` are values like words, in other languages this type of values are call as `strings`. And about `raw` I must be honest with you. I have never used it!

```{r}
#logical
TRUE

#integer
1L
#real
1.2
#complex
complex(real = 1,imaginary = 2)

#character
"String"
```

You may have notice that there is special ways to create these objects. We use `""` to define a `character`. We add `L` to the end of a number to make it explicit that it is an `integer`. We need the `complex()` function to create a `complex` number. And `logical`s are defined by the uppercase words `TRUE` and `FALSE`, and their respective initials, `T` and `F`.

## Vectors

Vectors are one-dimensional objects composed of a set of elements, where the order does not necessarily have a meaning, serving only to locate the element in the vector. The functions `c()` is used to create vector in R.

```{r}
v1 <- c(1,3,5)
v1
v2 <- c("ball","house")
v2
v3 <- c(T,T,F)
v3
```

The operator `[]` can be used to extract the element of certain position in a vector. For example, let's extract the second element of the vectors `v1`, `v2` and `v3`.

```{r}
v1[2]
v2[2]
v3[2]
```

Pay attention when use this operator to not try access an non existing position in a vector. such as trying to access the fourth element in a vector (`v1`) with only three elements. This will result in a `NA` value, which is represent the **missing values** in R, which are a very important topic that I will cover in the future. Stay tuned!

```{r}
v1[4]
```

There are other ways to create vectors in R considering their classes that I will dedicate a separate post for this.

In R different classes cannot coexist in the same vector (we will see what a vector is later, for now just trust me) and there is coercion when we put them together. Coercion occurs in the following order:

`character > complex > real > integer > logical`

This means, if you put a `character` and a `numeric` together in a `vector`, R will coerce the `numeric` to become a `character`. If you put a `logical` in the same `vector` as a `numeric` it will be turned into a `numeric`. The functions `class()` and `typeof()` can be used to check the class and type, respectively, of R objects.

```{r}
#class and typeof usage
class("ball")
typeof(1L)
class(1.2)


#coercion
obj1 <-c("ball",1)
class(obj1)
typeof(obj1)

obj2 <-c(TRUE,1)
class(obj2)
typeof(obj2)
```

This behavior is the source of major errors and it is always necessary to check that your objects are of the desired class. After all, it is impossible to perform mathematical operations with `character` in R, for example.

However, the coercion behavior can be used to our advantage in the case of the trick of using `logical`s and `numeric` together. Like in the case where we want to know how many numbers in an vector are greater than a certain value. By using the `>` (greater than) operator we perform a logical test that returns `TRUE`/`FALSE` values. The `sum()` function, on the other hand, adds up all the elements of a `vector` and if it receives a `logical` `vector` it will transform `TRUE` into `1` and `FALSE` into `0`.

```{r}
#a numeric vector
v1 <- c(1,2,3,2,4,5,8,2,1)


#logical test
v1 > 3

#use sum to get how many numbers are grater than 3
sum(v1 > 3)
```

The post is getting long, so that's it for now! In the next one we will talk about objects with larger dimensions like `matrix` and `data.frame`.

I'm waiting for you!
