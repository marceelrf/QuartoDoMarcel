{
  "hash": "72e7142951b30da72345e0c4d33b5bb4",
  "result": {
    "markdown": "---\ntitle: \"Operations with vectors\"\ndescription: \"Numeric operations\"\nauthor: \"Marcel Ferreira\"\ndate: \"2022-09-05\"\ncategories: [R, base]\nimage: \"blackboard-gf94387624_1280.png\"\n---\n\n```{=html}\n<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-9124147692602552\" crossorigin=\"anonymous\"></script>\n```\n\nIn [previous posts](https://quartodomarcel.netlify.app/posts/r-objects/) we have talked about object types and their `atomic` classes, among them `vectors`, which are the basis for the other objects. In this post I will begin to demonstrate how the main operations with `vectors` work, today focusing on numerical operations.\n\n## Numeric vectors\n\nAs said before, `vectors` are one-dimensional objects composed of a set of elements, where the order does not necessarily have a meaning, serving only to locate the element in the `vector`. Let's look at the example of `vector` `v1` below:\n\n\n$$\nv_1 = \\{1,2,3,4,5\\}\n$$\n\n\n`v1` represents the sequence of `integers` from 1 to 5. In R we can create any `vector` with the `c()` function, as we saw earlier. But it is not the only way. We can create sequences with the `:` operator, for `integers`, and the `seq()` function for general cases. So let's create `v1` as an object in R in these three different ways. But first a hint, when creating an object in R we can do it inside `()` and the generated object will be printed ***automatically***.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#created with c()\n(v1_1 <- c(1,2,3,4,5))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n\n```{.r .cell-code}\n#created with :\n(v1_2 <- 1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n\n```{.r .cell-code}\n#created with seq()\n(v1_3 <- seq(from = 1, to = 5, by = 1))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n:::\n\n\nWhen we choose a fractional value in the argument `by`, the `seq()` function can generate any number sequence (Arithmetic Progressions).\n\n## Math using vectors\n\nThe basic mathematical operations in R, addition, subtraction, multiplication, division, etc, are contained in the table below:\n\n+----------------+------------------------------+----------------+-------------------------+\n| Math           | Operator                     | Code           | Example                 |\n+================+==============================+================+=========================+\n| addtion        | `+`                          | `2+2`          | $2+2 =4$                |\n+----------------+------------------------------+----------------+-------------------------+\n| subtraction    | `-`                          | `4-2`          | $4-2=2$                 |\n+----------------+------------------------------+----------------+-------------------------+\n| multiplication | `*`                          | `2*2`          | $2\\times2=4$            |\n+----------------+------------------------------+----------------+-------------------------+\n| division       | `/`                          | `4/2`          | $\\frac{4}{2} = 2$       |\n+----------------+------------------------------+----------------+-------------------------+\n| power          | `^` or `**`                  | `2^2`          | $2^2=4$                 |\n+----------------+------------------------------+----------------+-------------------------+\n| square root    | `sqrt()`                     | `sqrt(4)`      | $\\sqrt{4} = 2$          |\n+----------------+------------------------------+----------------+-------------------------+\n| exponential    | `exp()`                      | `exp(-4)`      | $e^{-4} = 0.0183$       |\n+----------------+------------------------------+----------------+-------------------------+\n| log            | | `log()`, `log2` or `log10` | `log(0.0183)`  | $\\ln(0.0183) \\simeq -4$ |\n+----------------+------------------------------+----------------+-------------------------+\n\n: Math operations\n\nThere are others, but I believe that these will be the most used in our day to day. These operations in R work element by element. For example, when we add two `vectors` ($v_1=\\{1,2,3,4,5\\} v_2 = \\{2,3,4,5,6\\}$), R will add element 1 of `v1` to 1 of `v2`, 2 of `v1` to 2 of `v2`, and so on.\n\n\n$$\nv_1+v_2=\\{1+2,2+3,3+4,4+5,5+6\\}\n$$\n\n$$\nv_1+v_2=\\{3,5,7,9,11\\}\n$$\n\n\nSubtraction, multiplication, division, and potentiation follow the same principle.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv1 <- 1:5\nv2 <- 2:6\n#add\nv1+v2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  3  5  7  9 11\n```\n:::\n\n```{.r .cell-code}\n#sub\nv1-v2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -1 -1 -1 -1 -1\n```\n:::\n\n```{.r .cell-code}\n#multiplication\nv1*v2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  2  6 12 20 30\n```\n:::\n\n```{.r .cell-code}\n#division\nv1/v2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.5000000 0.6666667 0.7500000 0.8000000 0.8333333\n```\n:::\n\n```{.r .cell-code}\n#power\nv1^v2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]     1     8    81  1024 15625\n```\n:::\n:::\n\n\nFrom this we can infer that it is necessary in R that `vectors` contain the same number of elements (or the same `length`), but in practice this is not what happens. In case of `vectors` of different `lengths` R will `recycle` the `vector` with the smallest number of elements to match and thus perform the math. Consider the `vectors` $v_1 = \\{1,2,3,4,5\\}$ and $v_3 = \\{0,2,1\\}$, Let's see how R performs subtraction.\n\n\n$$\nv_1-v_3 = \\{1-0,2-2,3-1,4-0,5-2\\}\n$$\n\n$$\nv_1-v_3 = \\{1,0,2,4,3\\}\n$$\n\n\nAgain, the operations addition, multiplication, division and power work equally in R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv1 <- 1:5\nv3 <- c(0,2,1)\n#add\nv1+v3\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in v1 + v3: comprimento do objeto maior não é múltiplo do comprimento do\nobjeto menor\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 4 4 4 7\n```\n:::\n\n```{.r .cell-code}\n#sub\nv1-v3\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in v1 - v3: comprimento do objeto maior não é múltiplo do comprimento do\nobjeto menor\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 0 2 4 3\n```\n:::\n\n```{.r .cell-code}\n#multiplication\nv1*v3\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in v1 * v3: comprimento do objeto maior não é múltiplo do comprimento do\nobjeto menor\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  0  4  3  0 10\n```\n:::\n\n```{.r .cell-code}\n#division\nv1/v3\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in v1/v3: comprimento do objeto maior não é múltiplo do comprimento do\nobjeto menor\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Inf 1.0 3.0 Inf 2.5\n```\n:::\n\n```{.r .cell-code}\n#power\nv1^v3\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in v1^v3: comprimento do objeto maior não é múltiplo do comprimento do\nobjeto menor\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  4  3  1 25\n```\n:::\n:::\n\n\nNotice that a `warning` is displayed that the `vectors` have different sizes and that when we divide by `0` an `Inf` value relative to infinity is displayed. R's recycling behavior may seem strange at first, but it is useful for performing `scalar` operations with `vectors` (remembering that in practice in R there are no scalars, only unit `vectors`).\n\n\n$$\n5+v_1 = \\{5+1,5+2,5+3,5+4,5+5\\}\n$$\n\n$$\n5+v1 = \\{6,7,8,9,10\\}\n$$\n\n::: {.cell}\n\n```{.r .cell-code}\nv1 <- 1:5\n#add\nv1+5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  6  7  8  9 10\n```\n:::\n\n```{.r .cell-code}\n#sub\nv1-5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -4 -3 -2 -1  0\n```\n:::\n\n```{.r .cell-code}\n#multiplication\nv1*5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  5 10 15 20 25\n```\n:::\n\n```{.r .cell-code}\n#division\nv1/5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.2 0.4 0.6 0.8 1.0\n```\n:::\n\n```{.r .cell-code}\n#power\nv1^5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]    1   32  243 1024 3125\n```\n:::\n:::\n\n\nSimilarly, `functions` are also applied element by element. Let's look at the same v1 being calculated its square root, exponential and logarithm.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv1 <- 1:5\n#square root\nsqrt(v1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.000000 1.414214 1.732051 2.000000 2.236068\n```\n:::\n\n```{.r .cell-code}\n#exponential\nexp(v1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]   2.718282   7.389056  20.085537  54.598150 148.413159\n```\n:::\n\n```{.r .cell-code}\n#log\nlog(v1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.0000000 0.6931472 1.0986123 1.3862944 1.6094379\n```\n:::\n:::\n\n\nR also contains periodic functions like sine (`sin()`), cosine (`cos()`) and tangent (`tan()`), and an inner object to represent `pi`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npi\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.141593\n```\n:::\n\n```{.r .cell-code}\n#sine\nsin(pi)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.224606e-16\n```\n:::\n\n```{.r .cell-code}\n#cossine\ncos(pi)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -1\n```\n:::\n\n```{.r .cell-code}\n#tangent\ntan(pi)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -1.224647e-16\n```\n:::\n:::\n\n\nIt is important to see that the values calculated by R, although they are infinitesimal, are not exactly the known values.\n\n\n$$\n\\sin(\\pi) = 0\n$$\n\n$$\n\\cos(\\pi) = -1\n$$\n\n$$\n\\tan(\\pi) = 0\n$$\n\n\n## Concluding\n\nWell, there are many more functions and operators that can be applied, but I think we have covered the main ones. We saw how `recycling` works in operations. That's it for now. I hope to see you in the next posts!\n\nSee you there!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}