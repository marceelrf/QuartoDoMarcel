{
  "hash": "d16f5efee2b907255f6999fae66e1eda",
  "result": {
    "markdown": "---\ntitle: \"30 days chart challenge - day 13\"\ndescription: \"pop culture\"\nauthor: \"Marcel Ferreira\"\ndate: \"2023-04-13\"\ncategories: [R, Dataviz]\nimage: \"shoes-2804823_1920.jpg\"\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.0     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.1     v tibble    3.1.8\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.1     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n:::\n\n\n## Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmusics <- read_csv(\"Spotify_Youtube.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\nRows: 20718 Columns: 28\n-- Column specification\n-------------------------------------------------------- Delimiter: \",\" chr\n(10): Artist, Url_spotify, Track, Album, Album_type, Uri, Url_youtube, T... dbl\n(16): ...1, Danceability, Energy, Key, Loudness, Speechiness, Acousticne... lgl\n(2): Licensed, official_video\ni Use `spec()` to retrieve the full column specification for this data. i\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n* `` -> `...1`\n```\n:::\n:::\n\n\n## Count NA's\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmusics %>% \n  mutate(across(everything(), is.na)) %>%\n  summary(across(everything(), sum))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    ...1           Artist        Url_spotify       Track        \n Mode :logical   Mode :logical   Mode :logical   Mode :logical  \n FALSE:20718     FALSE:20718     FALSE:20718     FALSE:20718    \n                                                                \n   Album         Album_type         Uri          Danceability   \n Mode :logical   Mode :logical   Mode :logical   Mode :logical  \n FALSE:20718     FALSE:20718     FALSE:20718     FALSE:20716    \n                                                 TRUE :2        \n   Energy           Key           Loudness       Speechiness    \n Mode :logical   Mode :logical   Mode :logical   Mode :logical  \n FALSE:20716     FALSE:20716     FALSE:20716     FALSE:20716    \n TRUE :2         TRUE :2         TRUE :2         TRUE :2        \n Acousticness    Instrumentalness  Liveness        Valence       \n Mode :logical   Mode :logical    Mode :logical   Mode :logical  \n FALSE:20716     FALSE:20716      FALSE:20716     FALSE:20716    \n TRUE :2         TRUE :2          TRUE :2         TRUE :2        \n   Tempo         Duration_ms     Url_youtube       Title        \n Mode :logical   Mode :logical   Mode :logical   Mode :logical  \n FALSE:20716     FALSE:20716     FALSE:20248     FALSE:20248    \n TRUE :2         TRUE :2         TRUE :470       TRUE :470      \n  Channel          Views           Likes          Comments      \n Mode :logical   Mode :logical   Mode :logical   Mode :logical  \n FALSE:20248     FALSE:20248     FALSE:20177     FALSE:20149    \n TRUE :470       TRUE :470       TRUE :541       TRUE :569      \n Description      Licensed       official_video    Stream       \n Mode :logical   Mode :logical   Mode :logical   Mode :logical  \n FALSE:19728     FALSE:20248     FALSE:20248     FALSE:20142    \n TRUE :990       TRUE :470       TRUE :470       TRUE :576      \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmrf_songs <- musics %>%\n  filter(str_detect(Artist, \"Kings of Leon|The Killers|M83|Dua Lipa|Fleetwood Mac\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmrf_songs %>%\n  select(Artist,Track,Danceability:Duration_ms) %>%\n  pivot_longer(cols = Danceability:Duration_ms,\n               names_to = \"Params\",\n               values_to = \"Vals\") %>%\n  ggplot(aes(x = Artist, y = Vals, col = Artist)) +\n  geom_jitter(size = 3, alpha = .8) +\n  facet_wrap(~Params,scales = \"free\") +\n  labs(title = \"Spotify statistic about the top 10 songs of my top 5 favorite artists.\",\n       subtitle = \"Source: https://www.kaggle.com/datasets/salvatorerastelli/spotify-and-youtube\",\n       x = \"\",\n       y = \"\") +\n  #scale_y_continuous(expand = c(0,0)) +\n  scale_color_manual(values = c(\"#e187a8\",\n                                \"#efd893\",\n                                \"#749e97\",\n                                \"#2880bc\",\n                                \"#ab4841\")) +\n  theme(text = element_text(family = \"serif\"),\n        plot.title = element_text(family = \"serif\",face = \"bold\",size = 18,hjust = .5),\n        plot.subtitle = element_text(family = \"serif\",face = \"italic\",size = 8),\n        plot.background = element_rect(fill = \"white\"),\n        panel.background = element_rect(fill = \"white\"),\n        strip.text = element_text(face = \"bold\",size = 12),\n        panel.grid.major.y = element_line(colour = \"grey85\"),\n        panel.grid.major.x = element_blank(),\n        axis.text.y = element_text(size = 10,colour = \"black\"),\n        axis.text.x = element_blank(),\n        axis.ticks.x = element_blank(),\n        legend.position = \"bottom\",\n        legend.title = element_text(face = \"bold\",size = 12),\n        legend.text = element_text(face = \"italic\",size = 10))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(filename = \"day13_finalplot.png\",dpi = 600,bg = \"white\",width = 10)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSaving 10 x 5 in image\n```\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}