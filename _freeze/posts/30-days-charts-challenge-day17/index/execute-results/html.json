{
  "hash": "9d3066784f2507819de05fb5fdb6fe7a",
  "result": {
    "markdown": "---\ntitle: \"30 days chart challenge - day 17\"\ndescription: \"networks\"\nauthor: \"Marcel Ferreira\"\ndate: \"2023-04-17\"\ncategories: [R, Dataviz]\nimage: \"SPOTIFY-LOGO.png\"\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.0     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.1     v tibble    3.1.8\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.1     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(corrr)\nlibrary(arcdiagram)\n```\n:::\n\n\n\n## Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read_csv(file = \"Spotify_Youtube.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\nRows: 20718 Columns: 28\n-- Column specification\n-------------------------------------------------------- Delimiter: \",\" chr\n(10): Artist, Url_spotify, Track, Album, Album_type, Uri, Url_youtube, T... dbl\n(16): ...1, Danceability, Energy, Key, Loudness, Speechiness, Acousticne... lgl\n(2): Licensed, official_video\ni Use `spec()` to retrieve the full column specification for this data. i\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n* `` -> `...1`\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmrf_songs2 <- data %>%\n  filter(str_detect(Artist, \"Kings of Leon|The Killers|M83|Dua Lipa|Fleetwood Mac|Sia|Daft Punk|U2|Arcade Fire|The Strokes\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n(corr_df <-mrf_songs2 %>%\n  select(Artist,Danceability:Duration_ms) %>%\n  pivot_longer(cols = Danceability:Duration_ms,\n               names_to = \"Params\",\n               values_to = \"Vals\") %>%\n  pivot_wider(names_from = Artist,values_from = Vals) %>%\n  unnest() %>%\n  select(-Params) %>%\n  correlate(method = \"spearman\",diagonal = 0))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Values from `Vals` are not uniquely identified; output will contain list-cols.\n* Use `values_fn = list` to suppress this warning.\n* Use `values_fn = {summary_fun}` to summarise duplicates.\n* Use the following dplyr code to identify duplicates.\n  {data} %>%\n  dplyr::group_by(Params, Artist) %>%\n  dplyr::summarise(n = dplyr::n(), .groups = \"drop\") %>%\n  dplyr::filter(n > 1L)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `cols` is now required when using `unnest()`.\ni Please use `cols = c(`Daft Punk`, Sia, `Fleetwood Mac`, U2, `The Strokes`,\n  M83, `The Killers`, `Kings of Leon`, `Arcade Fire`, `Dua Lipa`)`.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCorrelation computed with\n* Method: 'spearman'\n* Missing treated using: 'pairwise.complete.obs'\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 x 11\n   term        Daft ~1   Sia Fleet~2    U2 The S~3   M83 The K~4 Kings~5 Arcad~6\n   <chr>         <dbl> <dbl>   <dbl> <dbl>   <dbl> <dbl>   <dbl>   <dbl>   <dbl>\n 1 Daft Punk     0     0.860   0.838 0.798   0.803 0.772   0.886   0.846   0.719\n 2 Sia           0.860 0       0.883 0.879   0.835 0.717   0.949   0.880   0.789\n 3 Fleetwood ~   0.838 0.883   0     0.850   0.786 0.667   0.889   0.842   0.790\n 4 U2            0.798 0.879   0.850 0       0.829 0.718   0.889   0.834   0.837\n 5 The Strokes   0.803 0.835   0.786 0.829   0     0.741   0.836   0.772   0.761\n 6 M83           0.772 0.717   0.667 0.718   0.741 0       0.746   0.707   0.662\n 7 The Killers   0.886 0.949   0.889 0.889   0.836 0.746   0       0.890   0.796\n 8 Kings of L~   0.846 0.880   0.842 0.834   0.772 0.707   0.890   0       0.766\n 9 Arcade Fire   0.719 0.789   0.790 0.837   0.761 0.662   0.796   0.766   0    \n10 Dua Lipa      0.886 0.952   0.895 0.895   0.854 0.723   0.967   0.872   0.789\n# ... with 1 more variable: `Dua Lipa` <dbl>, and abbreviated variable names\n#   1: `Daft Punk`, 2: `Fleetwood Mac`, 3: `The Strokes`, 4: `The Killers`,\n#   5: `Kings of Leon`, 6: `Arcade Fire`\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_df <- corr_df %>%\n  pivot_longer(cols = -term,\n               names_to = \"term2\",\n               values_to = \"cor\") %>%\n  mutate(vertice = case_when(\n    cor > 0.85 ~ 1,\n    TRUE~0\n  ))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_mat <- final_df %>%\n  filter(vertice == 1) %>%\n  select(term,term2) %>%\n  as.matrix()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncor_vec <-  final_df %>%\n  filter(vertice == 1) %>%\n  pull(cor)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npng(filename = \"day17_finalplot.png\",width = 3500,height = 2500,bg = \"white\",res = 600)\n\narcplot(final_mat,\n        vertices = corr_df$term,\n        col.nodes = c(\"#d5b76f\",\n                      \"#fe3bd1\",\n                      \"#efd893\",\n                      \"#586a60\",\n                      \"#30b5e9\",\n                      \"#2880bc\",\n                      \"#ab4841\",\n                      \"#749e97\",\n                      \"grey10\",\n                      \"#e187a8\"),\n        col.arcs = hsv(0, 0, 0.2, 0.15),\n        cex.nodes = log(c(3,6,4,4,1,0,6,3,0,7)+1)+.5,\n        lwd.arcs = log(cor_vec,base = .99)/1.5)\ndev.off()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\npng \n  2 \n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}