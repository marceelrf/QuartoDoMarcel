{
  "hash": "0eb27235f4771e4d9179b0e6058332c8",
  "result": {
    "markdown": "---\ntitle: \"30 days chart challenge - day 11\"\ndescription: \"circle\"\nauthor: \"Marcel Ferreira\"\ndate: \"2023-04-11\"\ncategories: [R, Dataviz]\nimage: \"squaresociallogo400x400_0.png\"\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.0     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.1     v tibble    3.1.8\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.1     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(cowplot)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'cowplot'\n\nThe following object is masked from 'package:lubridate':\n\n    stamp\n```\n:::\n:::\n\n\n## Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_titles <- read_csv(file = \"titles.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 3030 Columns: 15\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr (8): id, title, type, description, age_certification, genres, production...\ndbl (7): release_year, runtime, seasons, imdb_score, imdb_votes, tmdb_popula...\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(data_titles)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 3,030\nColumns: 15\n$ id                   <chr> \"tm77588\", \"tm155702\", \"tm83648\", \"tm3175\", \"ts22~\n$ title                <chr> \"Casablanca\", \"The Wizard of Oz\", \"Citizen Kane\",~\n$ type                 <chr> \"MOVIE\", \"MOVIE\", \"MOVIE\", \"MOVIE\", \"SHOW\", \"MOVI~\n$ description          <chr> \"In Casablanca, Morocco in December 1941, a cynic~\n$ release_year         <dbl> 1943, 1939, 1941, 1945, 1940, 1940, 1946, 1934, 1~\n$ age_certification    <chr> \"PG\", \"G\", \"PG\", NA, NA, \"G\", NA, NA, NA, \"PG-13\"~\n$ runtime              <dbl> 102, 102, 119, 113, 8, 238, 114, 93, 111, 109, 12~\n$ genres               <chr> \"['drama', 'romance', 'war']\", \"['fantasy', 'fami~\n$ production_countries <chr> \"['US']\", \"['US']\", \"['US']\", \"['US']\", \"['US']\",~\n$ seasons              <dbl> NA, NA, NA, NA, 16, NA, NA, NA, NA, NA, NA, NA, N~\n$ imdb_id              <chr> \"tt0034583\", \"tt0032138\", \"tt0033467\", \"tt0037059~\n$ imdb_score           <dbl> 8.5, 8.1, 8.3, 7.5, 7.7, 8.2, 7.9, 7.9, 7.9, 8.3,~\n$ imdb_votes           <dbl> 577842, 406105, 446627, 25589, 859, 319463, 87289~\n$ tmdb_popularity      <dbl> 22.005, 56.631, 19.900, 8.311, 1.400, 27.535, 11.~\n$ tmdb_score           <dbl> 8.167, 7.583, 8.022, 7.000, 10.000, 8.000, 7.700,~\n```\n:::\n:::\n\n\n## Analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data_titles %>%\n  filter(type == \"MOVIE\") %>%\n  mutate(genres = str_remove_all(genres, \"\\\\[|\\\\]\")) %>%\n  mutate(genres = str_remove_all(genres,\"\\'\")) %>%\n  separate_longer_delim(genres,\",\") %>%\n  mutate(decade = case_when(\n    release_year < 1910 ~ 1910,\n    release_year < 1920 ~ 1920,\n    release_year < 1930 ~ 1930,\n    release_year < 1940 ~ 1940,\n    release_year < 1950 ~ 1950,\n    release_year < 1960 ~ 1960,\n    release_year < 1970 ~ 1970,\n    release_year < 1980 ~ 1980,\n    release_year < 1990 ~ 1990,\n    release_year < 2000 ~ 2000,\n    release_year < 2010 ~ 2010,\n    release_year < 2020 ~ 2020,\n    release_year < 2030 ~ 2030,\n  )) %>%\n  select(genres, decade)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>%\n  mutate(genres = factor(genres)) %>%\n  mutate(genres = fct_lump_min(genres,10,other_level = \"other\")) %>%\n  group_by(genres, decade) %>%\n  count(sort = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 340 x 3\n# Groups:   genres, decade [340]\n   genres          decade     n\n   <fct>            <dbl> <int>\n 1 \"documentation\"   2020   212\n 2 \"drama\"           2020   153\n 3 \"documentation\"   2030   125\n 4 \" drama\"          2020   117\n 5 \"comedy\"          2020   107\n 6 \"comedy\"          2010   104\n 7 \"drama\"           2010   100\n 8 \" thriller\"       2020    99\n 9 \" action\"         2020    96\n10 \"drama\"           2000    86\n# ... with 330 more rows\n```\n:::\n\n```{.r .cell-code}\n  # ggplot(aes(x = genres, y = n)) +\n  # geom_col() +\n  # facet_wrap(~decade) +\n  # coord_polar() +\n  # theme_void()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npdata <- data_titles %>%\n  filter(type == \"MOVIE\") %>%\n  mutate(genres = str_remove_all(genres, \"\\\\[|\\\\]\")) %>%\n  mutate(genres = str_remove_all(genres,\"\\'\")) %>%\n  mutate(genres = str_remove_all(genres, \" \")) %>%\n  separate_longer_delim(genres,\",\") %>%\n  mutate(genres = factor(genres)) %>%\n  mutate(genres = fct_lump_n(genres,10,other_level = \"other\")) %>% \n  filter(genres != \"other\") %>%\n  mutate(genres = fct_drop(genres,\"other\")) %>%\n  mutate(genres = fct_infreq(genres,ordered = NA)) %>%\n  mutate(genres = fct_rev(genres)) %>%\n  group_by(genres) %>%\n  count()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n gg <- pdata %>%\n  ggplot(aes(x = genres, y = n, fill = genres)) +\n  geom_col(alpha = .75) +\n  geom_text(aes(label = n), family = \"serif\",\n            fontface = \"bold\",nudge_y = 25,nudge_x = .1) +\n  scale_y_continuous(limits = c(0,2194)) +\n  coord_polar(theta = \"y\",clip = \"off\") +\n  scale_fill_manual(values = c(\"#10154c\",\n                        \"#2b2684\",\n                        \"#3c56b7\",\n                        \"#7587d9\",\n                        \"#bf9ee3\",\n                        \"#a569cb\",\n                        \"#a8278b\",\n                        \"#90309b\",\n                        \"#663795\",\n                        \"#4f1f5b\")) +\n  labs(title = \"Top 10 movie genres available on HBOmax\",\n       subtitle = \"source: https://www.kaggle.com/datasets/dgoenrique/hbo-max-movies-and-tv-shows\",\n       caption = \"@marceelrf\") +\n  theme_void() +\n  theme(text = element_text(family = \"serif\"),\n        plot.title = element_text(face = \"bold\",size = 25,hjust = .5),\n        plot.subtitle = element_text(face = \"italic\",size = 10),\n        plot.caption = element_text(face = \"bold.italic\",size = 15),\n       plot.background = element_rect(fill = \"#e8e6d1\",linewidth = 0),\n       panel.background = element_rect(fill = \"#e8e6d1\",linewidth = 0,linetype = \"blank\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggdraw(gg) +\n  draw_image(image = \"squaresociallogo400x400_0.png\",\n             x = .00,y = .25,\n             width = .4,\n             height = .4)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(filename = \"day11_finalplot.png\",dpi = 600,bg = \"#e8e6d1\",width = 10)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSaving 10 x 5 in image\n```\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}