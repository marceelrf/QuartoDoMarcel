{
  "hash": "7707e7cd8b3a732f25b9b578fee5bce4",
  "result": {
    "markdown": "---\ntitle: \"30 days chart challenge - day 01\"\ndescription: \"part to whole\"\nauthor: \"Marcel Ferreira\"\ndate: \"2023-04-01\"\ncategories: [R, Dataviz]\nimage: \"Marvel_Logo.svg\"\n---\n\n\n## Data\n\nThe data that I choose to this challenge was the **Marvel Chracters** (https://www.kaggle.com/datasets/syedasimalishah/marvel-chracters).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.0     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.1     v tibble    3.1.8\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.1     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(ggsankey)\nlibrary(extrafont)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRegistering fonts with R\n```\n:::\n\n```{.r .cell-code}\nlibrary(cowplot)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'cowplot'\n\nThe following object is masked from 'package:lubridate':\n\n    stamp\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read_csv(file = \"Marvel Movies.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 16376 Columns: 11\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr (9): name, ID, ALIGN, EYE, HAIR, SEX, GSM, ALIVE, FIRST APPEARANCE\ndbl (2): APPEARANCES, Year\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\nCheck the NA's\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>% \n  mutate(\n    across(everything(),is.na)\n    ) %>%\n  summarise(\n    across(everything(),sum)\n    )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 11\n   name    ID ALIGN   EYE  HAIR   SEX   GSM ALIVE APPEARANCES FIRST APPE~1  Year\n  <int> <int> <int> <int> <int> <int> <int> <int>       <int>        <int> <int>\n1     0  3770  2812  9767  4264   854 16286     3        1096          815   815\n# ... with abbreviated variable name 1: `FIRST APPEARANCE`\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>%\n  map(.f = \\(x) length(unique(x)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$name\n[1] 16376\n\n$ID\n[1] 5\n\n$ALIGN\n[1] 4\n\n$EYE\n[1] 25\n\n$HAIR\n[1] 26\n\n$SEX\n[1] 5\n\n$GSM\n[1] 7\n\n$ALIVE\n[1] 3\n\n$APPEARANCES\n[1] 359\n\n$`FIRST APPEARANCE`\n[1] 833\n\n$Year\n[1] 76\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>% \n  group_by(HAIR) %>%\n  count(sort = TRUE) %>%\n  mutate(prop = 100*n/nrow(data))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 26 x 3\n# Groups:   HAIR [26]\n   HAIR           n   prop\n   <chr>      <int>  <dbl>\n 1 <NA>        4264 26.0  \n 2 Black Hair  3755 22.9  \n 3 Brown Hair  2339 14.3  \n 4 Blond Hair  1582  9.66 \n 5 No Hair     1176  7.18 \n 6 Bald         838  5.12 \n 7 White Hair   754  4.60 \n 8 Red Hair     620  3.79 \n 9 Grey Hair    531  3.24 \n10 Green Hair   117  0.714\n# ... with 16 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>% \n    group_by(EYE) %>%\n  count(sort = TRUE) %>%\n  mutate(prop = 100*n/nrow(data))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 25 x 3\n# Groups:   EYE [25]\n   EYE             n   prop\n   <chr>       <int>  <dbl>\n 1 <NA>         9767 59.6  \n 2 Blue Eyes    1962 12.0  \n 3 Brown Eyes   1924 11.7  \n 4 Green Eyes    613  3.74 \n 5 Black Eyes    555  3.39 \n 6 Red Eyes      508  3.10 \n 7 White Eyes    400  2.44 \n 8 Yellow Eyes   256  1.56 \n 9 Grey Eyes      95  0.580\n10 Hazel Eyes     76  0.464\n# ... with 15 more rows\n```\n:::\n:::\n\n\n\\\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(df_ex <- data %>%\n  slice_sample(n = 20) %>%\n    mutate(across(where(is.character),.f = \\(x) replace_na(x,\"No Info\"))) %>%\n  make_long(\"ID\",\"SEX\",\"EYE\",\"HAIR\",\"ALIGN\",\"ALIVE\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 120 x 4\n   x     node              next_x next_node        \n   <fct> <chr>             <fct>  <chr>            \n 1 ID    No Info           SEX    Female Characters\n 2 SEX   Female Characters EYE    No Info          \n 3 EYE   No Info           HAIR   Brown Hair       \n 4 HAIR  Brown Hair        ALIGN  No Info          \n 5 ALIGN No Info           ALIVE  Living Characters\n 6 ALIVE Living Characters <NA>   <NA>             \n 7 ID    Secret Identity   SEX    Male Characters  \n 8 SEX   Male Characters   EYE    No Info          \n 9 EYE   No Info           HAIR   Brown Hair       \n10 HAIR  Brown Hair        ALIGN  Bad Characters   \n# ... with 110 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n(\n  p1 <- df_ex %>%\n  ggplot(aes(x = x,\n             next_x = next_x,\n             node = node,\n             next_node = next_node,\n             fill = factor(node),\n             label = node)) +\n  geom_sankey(flow.alpha = .5, color = \"black\") +\n  geom_sankey_label(size = 3.5, color = 1, fill = \"white\",family = \"Segoe UI\") +\n  viridis::scale_fill_viridis(option = \"A\",discrete = TRUE) + \n  theme_void() +\n  labs(title =\"Marvel movie characters\") +\n  theme(\n    legend.position = \"none\",\n    plot.background = element_rect(fill = \"#e8e6d1\",linewidth = 0),\n    panel.background = element_rect(fill = \"#e8e6d1\",linewidth = 0,linetype = \"blank\"),\n    text = element_text(family = \"Segoe UI\"),\n    plot.title = element_text(family = \"Segoe UI\",face = \"bold\",size = 30,hjust = .5))\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggdraw(p1) +\n  draw_label(label = \"@marceelrf\",x = .1, y = 0.05,fontfamily = \"Segoe UI\") +\n  draw_image(image = \"Marvel_Logo.svg\",x = .85,y = .01,width = 0.13, height = 0.2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): métrica da\nfonte desconhecida para caractere 0x4d\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): fonte com\nlargura desconhecida para caractere 0x67\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): fonte com\nlargura desconhecida para caractere 0x6a\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): fonte com\nlargura desconhecida para caractere 0x70\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): fonte com\nlargura desconhecida para caractere 0x71\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): fonte com\nlargura desconhecida para caractere 0x79\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): fonte com\nlargura desconhecida para caractere 0x51\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## Final plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(plot_final <- \n    data %>%\n    mutate(across(where(is.character),.f = \\(x) replace_na(x,\"No Info\"))) %>%\n    mutate(HAIR = fct_lump_prop(HAIR, 0.05),\n           EYE = fct_lump_prop(EYE, 0.05)) %>%\n  make_long(\"ID\",\"SEX\",\"EYE\",\"HAIR\",\"ALIGN\",\"ALIVE\") %>%\n    ggplot(aes(x = x,\n             next_x = next_x,\n             node = node,\n             next_node = next_node,\n             fill = factor(node),\n             label = node)) +\n  geom_sankey(flow.alpha = .5, color = \"black\") +\n  geom_sankey_label(size = 3.5, color = 1, fill = \"white\",family = \"Segoe UI\") +\n  viridis::scale_fill_viridis(option = \"A\",discrete = TRUE) + \n  theme_void() +\n  labs(title = \"Marvel movie characters\",\n       subtitle = \"Source: https://www.kaggle.com/datasets/syedasimalishah/marvel-chracters\") +\n  theme(\n    legend.position = \"none\",\n    plot.background = element_rect(fill = \"#e8e6d1\",linewidth = 0),\n    panel.background = element_rect(fill = \"#e8e6d1\",linewidth = 0,linetype = \"blank\"), plot.subtitle = element_text(family = \"Segoe UI\",face = \"italic\",size = 8,hjust = .1),\n    text = element_text(family = \"Segoe UI\"),\n    plot.title = element_text(family = \"Segoe UI\",face = \"bold\",size = 30,hjust = .5))\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: attributes are not identical across measure variables; they will be\ndropped\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggdraw(plot_final) +\n  draw_label(label = \"@marceelrf\",x = .1, y = 0.025,fontfamily = \"Segoe UI\") +\n  draw_image(image = \"Marvel_Logo.svg\",x = .85,y = 0.00001,\n             width = 0.13, height = 0.2,vjust = .25)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): métrica da\nfonte desconhecida para caractere 0x4d\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): fonte com\nlargura desconhecida para caractere 0x67\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): fonte com\nlargura desconhecida para caractere 0x6a\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): fonte com\nlargura desconhecida para caractere 0x70\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): fonte com\nlargura desconhecida para caractere 0x71\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): fonte com\nlargura desconhecida para caractere 0x79\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): fonte com\nlargura desconhecida para caractere 0x51\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-2.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(filename = \"day01_finalplot.png\",width = 10,height = 7,dpi = 600)\n```\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}